
==================== Tidy Core ====================

Result size of Tidy Core
  = {terms: 5,537, types: 9,271, coercions: 1,812, joins: 34/61}

lvl_rAyU = "src/Compact/Pure/SExpr.hs:37:13-24|case"#

lvl1_rAyV = patError lvl_rAyU

Rec {
$fEqSExpr_$c/=
  = \ eta_B0 eta1_B1 ->
      case $fEqSExpr_$c== eta_B0 eta1_B1 of {
        False -> True;
        True -> False
      }

$fEqSExpr = C:Eq $fEqSExpr_$c== $fEqSExpr_$c/=

$fEqSExpr_$c==
  = \ a_ayCW b_ayCX ->
      case dataToTag# a_ayCW of a#_ayCY { __DEFAULT ->
      case dataToTag# b_ayCX of b#_ayCZ { __DEFAULT ->
      case /=# a#_ayCY b#_ayCZ of {
        __DEFAULT ->
          case a_ayCW of {
            SList a1_ayD0 a2_ayD1 ->
              case b_ayCX of {
                __DEFAULT -> case lvl1_rAyV of wild2_00 { };
                SList b1_ayD2 b2_ayD3 ->
                  case a1_ayD0 of { I# x_a3RH ->
                  case b1_ayD2 of { I# y_a3RK ->
                  case ==# x_a3RH y_a3RK of {
                    __DEFAULT -> False;
                    1# -> $fEqList_$c== $fEqSExpr a2_ayD1 b2_ayD3
                  }
                  }
                  }
              };
            SInteger a1_ayD4 a2_ayD5 ->
              case b_ayCX of {
                __DEFAULT -> case lvl1_rAyV of wild2_00 { };
                SInteger b1_ayD6 b2_ayD7 ->
                  case a1_ayD4 of { I# x_a3RH ->
                  case b1_ayD6 of { I# y_a3RK ->
                  case ==# x_a3RH y_a3RK of {
                    __DEFAULT -> False;
                    1# -> eqInt a2_ayD5 b2_ayD7
                  }
                  }
                  }
              };
            SString a1_ayD8 a2_ayD9 ->
              case b_ayCX of {
                __DEFAULT -> case lvl1_rAyV of wild2_00 { };
                SString b1_ayDa b2_ayDb ->
                  case a1_ayD8 of { I# x_a3RH ->
                  case b1_ayDa of { I# y_a3RK ->
                  case ==# x_a3RH y_a3RK of {
                    __DEFAULT -> False;
                    1# -> eqString a2_ayD9 b2_ayDb
                  }
                  }
                  }
              };
            SSymbol a1_ayDc a2_ayDd ->
              case b_ayCX of {
                __DEFAULT -> case lvl1_rAyV of wild2_00 { };
                SSymbol b1_ayDe b2_ayDf ->
                  case a1_ayDc of { I# x_a3RH ->
                  case b1_ayDe of { I# y_a3RK ->
                  case ==# x_a3RH y_a3RK of {
                    __DEFAULT -> False;
                    1# -> eqString a2_ayDd b2_ayDf
                  }
                  }
                  }
              }
          };
        1# -> False
      }
      }
      }
end Rec }

$fMovableSExprParseError_$cmove
  = \ ds_sAlt ->
      case ds_sAlt of wild_X1 {
        UnexpectedClosingParen n_aywB ->
          case n_aywB of { I# i_idUe -> Ur wild_X1 };
        UnexpectedEOFSExpr n_aywD ->
          case n_aywD of { I# i_idUe -> Ur wild_X1 };
        UnexpectedEOFSList n_aywF ->
          case n_aywF of { I# i_idUe -> Ur wild_X1 };
        UnexpectedEOFSString n_aywH ->
          case n_aywH of { I# i_idUe -> Ur wild_X1 };
        UnexpectedContentAfter n_aywJ ->
          case n_aywJ of { I# i_idUe -> Ur wild_X1 }
      }

$fDupableSExprParseError_$cdup2
  = \ ds_sAly ->
      case ds_sAly of wild_X1 {
        UnexpectedClosingParen n_aywL ->
          case n_aywL of { I# i_iAfK -> (wild_X1, wild_X1) };
        UnexpectedEOFSExpr n_aywO ->
          case n_aywO of { I# i_iAfK -> (wild_X1, wild_X1) };
        UnexpectedEOFSList n_aywR ->
          case n_aywR of { I# i_iAfK -> (wild_X1, wild_X1) };
        UnexpectedEOFSString n_aywU ->
          case n_aywU of { I# i_iAfK -> (wild_X1, wild_X1) };
        UnexpectedContentAfter n_aywX ->
          case n_aywX of { I# i_iAfK -> (wild_X1, wild_X1) }
      }

$fConsumableSExprParseError_$cconsume
  = \ ds_dzIE ->
      case ds_dzIE of {
        UnexpectedClosingParen n_ayx0 ->
          case n_ayx0 of { I# i_izIZ -> () };
        UnexpectedEOFSExpr n_ayx1 -> case n_ayx1 of { I# i_izIZ -> () };
        UnexpectedEOFSList n_ayx2 -> case n_ayx2 of { I# i_izIZ -> () };
        UnexpectedEOFSString n_ayx3 -> case n_ayx3 of { I# i_izIZ -> () };
        UnexpectedContentAfter n_ayx4 -> case n_ayx4 of { I# i_izIZ -> () }
      }

$fDupableSExprParseError_$cdupR
  = \ eta_izIL ->
      Streamed
        (ReplicationStream
           eta_izIL
           id
           $fDupableSExprParseError_$cdup2
           $fConsumableSExprParseError_$cconsume)

$fDupableSExprParseError
  = C:Dupable
      ($fConsumableSExprParseError_$cconsume `cast` <Co:3> :: ...)
      $fDupableSExprParseError_$cdupR
      $fDupableSExprParseError_$cdup2

$fMovableSExprParseError
  = C:Movable
      $fDupableSExprParseError $fMovableSExprParseError_$cmove

$fConsumableSExprParseError
  = $fConsumableSExprParseError_$cconsume `cast` <Co:3> :: ...

$fGenericSExpr_$cto
  = \ @x_azcx ds_dzGV ->
      case ds_dzGV `cast` <Co:159> :: ... of {
        L1 ds1_dzH5 ->
          case ds1_dzH5 of {
            L1 ds2_dzH6 ->
              case ds2_dzH6 `cast` <Co:37> :: ... of { :*: ds3_dzH8 ds4_dzH9 ->
              SList
                (ds3_dzH8 `cast` <Co:20> :: ...) (ds4_dzH9 `cast` <Co:22> :: ...)
              };
            R1 ds2_dzHc ->
              case ds2_dzHc `cast` <Co:36> :: ... of { :*: ds3_dzHe ds4_dzHf ->
              SInteger
                (ds3_dzHe `cast` <Co:20> :: ...) (ds4_dzHf `cast` <Co:20> :: ...)
              }
          };
        R1 ds1_dzHi ->
          case ds1_dzHi of {
            L1 ds2_dzHj ->
              case ds2_dzHj `cast` <Co:36> :: ... of { :*: ds3_dzHl ds4_dzHm ->
              SString
                (ds3_dzHl `cast` <Co:20> :: ...) (ds4_dzHm `cast` <Co:20> :: ...)
              };
            R1 ds2_dzHp ->
              case ds2_dzHp `cast` <Co:36> :: ... of { :*: ds3_dzHr ds4_dzHs ->
              SSymbol
                (ds3_dzHr `cast` <Co:20> :: ...) (ds4_dzHs `cast` <Co:20> :: ...)
              }
          }
      }

$fGenericSExpr_$cfrom
  = (\ @x_az9g x1_ayDg ->
       case x1_ayDg of {
         SList g1_ayDh g2_ayDi ->
           L1
             (L1
                ((:*:
                    (g1_ayDh `cast` <Co:22> :: ...) (g2_ayDi `cast` <Co:24> :: ...))
                 `cast` <Co:38> :: ...));
         SInteger g1_ayDj g2_ayDk ->
           L1
             (R1
                ((:*:
                    (g1_ayDj `cast` <Co:22> :: ...) (g2_ayDk `cast` <Co:22> :: ...))
                 `cast` <Co:37> :: ...));
         SString g1_ayDl g2_ayDm ->
           R1
             (L1
                ((:*:
                    (g1_ayDl `cast` <Co:22> :: ...) (g2_ayDm `cast` <Co:22> :: ...))
                 `cast` <Co:37> :: ...));
         SSymbol g1_ayDn g2_ayDo ->
           R1
             (R1
                ((:*:
                    (g1_ayDn `cast` <Co:22> :: ...) (g2_ayDo `cast` <Co:22> :: ...))
                 `cast` <Co:37> :: ...))
       })
    `cast` <Co:166> :: ...

$fGenericSExpr
  = C:Generic $fGenericSExpr_$cfrom $fGenericSExpr_$cto

Rec {
$wgo
  = \ ds_sAlL ->
      case ds_sAlL of {
        [] -> (##);
        : x_azJd xs_azJe -> case x_azJd of { C# ipv_azJ5 -> $wgo xs_azJe }
      }
end Rec }

Rec {
$w$crnf
  = \ x_sAlQ ->
      case x_sAlQ of {
        SList g1_ayDh g2_ayDi ->
          case g1_ayDh of { I# ipv_azJU -> $wgo1 g2_ayDi };
        SInteger g1_ayDj g2_ayDk ->
          case g1_ayDj of { I# ipv_azJU ->
          case g2_ayDk of { I# ipv1_Xm -> (##) }
          };
        SString g1_ayDl g2_ayDm ->
          case g1_ayDl of { I# ipv_azJU -> $wgo g2_ayDm };
        SSymbol g1_ayDn g2_ayDo ->
          case g1_ayDn of { I# ipv_azJU -> $wgo g2_ayDo }
      }

$wgo1
  = \ ds_sAlV ->
      case ds_sAlV of {
        [] -> (##);
        : x_azJd xs_azJe ->
          case $w$crnf x_azJd of { (# #) -> $wgo1 xs_azJe }
      }
end Rec }

$fNFDataSExpr_$crnf
  = \ x_sAlQ -> case $w$crnf x_sAlQ of { (# #) -> () }

$fNFDataSExpr = $fNFDataSExpr_$crnf `cast` <Co:3> :: ...

$fGenericSExprParseError_$cto
  = \ @x_az4K ds_dzFB ->
      case ds_dzFB `cast` <Co:120> :: ... of {
        L1 ds1_dzFI ->
          case ds1_dzFI of {
            L1 ds2_dzFJ ->
              UnexpectedClosingParen (ds2_dzFJ `cast` <Co:41> :: ...);
            R1 ds2_dzFM -> UnexpectedEOFSExpr (ds2_dzFM `cast` <Co:41> :: ...)
          };
        R1 ds1_dzFP ->
          case ds1_dzFP of {
            L1 ds2_dzFQ -> UnexpectedEOFSList (ds2_dzFQ `cast` <Co:41> :: ...);
            R1 ds2_dzFT ->
              case ds2_dzFT of {
                L1 ds3_dzFU ->
                  UnexpectedEOFSString (ds3_dzFU `cast` <Co:41> :: ...);
                R1 ds3_dzFX ->
                  UnexpectedContentAfter (ds3_dzFX `cast` <Co:41> :: ...)
              }
          }
      }

$fGenericSExprParseError_$cfrom
  = (\ @x_az1W x1_ayCK ->
       case x1_ayCK of {
         UnexpectedClosingParen g1_ayCL ->
           L1 (L1 (g1_ayCL `cast` <Co:44> :: ...));
         UnexpectedEOFSExpr g1_ayCM ->
           L1 (R1 (g1_ayCM `cast` <Co:44> :: ...));
         UnexpectedEOFSList g1_ayCN ->
           R1 (L1 (g1_ayCN `cast` <Co:44> :: ...));
         UnexpectedEOFSString g1_ayCO ->
           R1 (R1 (L1 (g1_ayCO `cast` <Co:44> :: ...)));
         UnexpectedContentAfter g1_ayCP ->
           R1 (R1 (R1 (g1_ayCP `cast` <Co:44> :: ...)))
       })
    `cast` <Co:127> :: ...

$fGenericSExprParseError
  = C:Generic
      $fGenericSExprParseError_$cfrom $fGenericSExprParseError_$cto

$fNFDataSExprParseError_$crnf
  = \ x_XL ->
      case x_XL of {
        UnexpectedClosingParen g1_ayCL ->
          case g1_ayCL of { I# ipv_azJU -> () };
        UnexpectedEOFSExpr g1_ayCM ->
          case g1_ayCM of { I# ipv_azJU -> () };
        UnexpectedEOFSList g1_ayCN ->
          case g1_ayCN of { I# ipv_azJU -> () };
        UnexpectedEOFSString g1_ayCO ->
          case g1_ayCO of { I# ipv_azJU -> () };
        UnexpectedContentAfter g1_ayCP ->
          case g1_ayCP of { I# ipv_azJU -> () }
      }

$fNFDataSExprParseError
  = $fNFDataSExprParseError_$crnf `cast` <Co:3> :: ...

lvl2_rAyW = "src/Compact/Pure/SExpr.hs:71:13-24|case"#

$fEqSExprParseError1 = patError lvl2_rAyW

$fEqSExprParseError_$c==
  = \ a_ayCw b_ayCx ->
      case dataToTag# a_ayCw of a#_ayCy { __DEFAULT ->
      case dataToTag# b_ayCx of b#_ayCz { __DEFAULT ->
      case /=# a#_ayCy b#_ayCz of {
        __DEFAULT ->
          case a_ayCw of {
            UnexpectedClosingParen a1_ayCA ->
              case b_ayCx of {
                __DEFAULT -> case $fEqSExprParseError1 of wild2_00 { };
                UnexpectedClosingParen b1_ayCB -> eqInt a1_ayCA b1_ayCB
              };
            UnexpectedEOFSExpr a1_ayCC ->
              case b_ayCx of {
                __DEFAULT -> case $fEqSExprParseError1 of wild2_00 { };
                UnexpectedEOFSExpr b1_ayCD -> eqInt a1_ayCC b1_ayCD
              };
            UnexpectedEOFSList a1_ayCE ->
              case b_ayCx of {
                __DEFAULT -> case $fEqSExprParseError1 of wild2_00 { };
                UnexpectedEOFSList b1_ayCF -> eqInt a1_ayCE b1_ayCF
              };
            UnexpectedEOFSString a1_ayCG ->
              case b_ayCx of {
                __DEFAULT -> case $fEqSExprParseError1 of wild2_00 { };
                UnexpectedEOFSString b1_ayCH -> eqInt a1_ayCG b1_ayCH
              };
            UnexpectedContentAfter a1_ayCI ->
              case b_ayCx of {
                __DEFAULT -> case $fEqSExprParseError1 of wild2_00 { };
                UnexpectedContentAfter b1_ayCJ -> eqInt a1_ayCI b1_ayCJ
              }
          };
        1# -> False
      }
      }
      }

$fEqSExprParseError_$c/=
  = \ eta_B0 eta1_B1 ->
      case $fEqSExprParseError_$c== eta_B0 eta1_B1 of {
        False -> True;
        True -> False
      }

$fEqSExprParseError
  = C:Eq $fEqSExprParseError_$c== $fEqSExprParseError_$c/=

loadSampleData3 = "src/Compact/Pure/test_data.sexpr"#

loadSampleData2 = unpackCString# loadSampleData3

loadSampleData1
  = \ eta_izLg ->
      withBinaryFile1
        loadSampleData2 ReadMode (readFile2 `cast` <Co:6> :: ...) eta_izLg

loadSampleData = loadSampleData1 `cast` <Co:3> :: ...

endPos
  = \ ds_dzDo ->
      case ds_dzDo of {
        SList n_ayx9 ds1_dzDz -> n_ayx9;
        SInteger n_ayxa ds1_dzDA -> n_ayxa;
        SString n_ayxb ds1_dzDB -> n_ayxb;
        SSymbol n_ayxc ds1_dzDC -> n_ayxc
      }

errEndPos
  = \ ds_dzCY ->
      case ds_dzCY of {
        UnexpectedClosingParen n_ayxp -> n_ayxp;
        UnexpectedEOFSExpr n_ayxq -> n_ayxq;
        UnexpectedEOFSList n_ayxr -> n_ayxr;
        UnexpectedEOFSString n_ayxs -> n_ayxs;
        UnexpectedContentAfter n_ayxt -> n_ayxt
      }

$trModule4 = "linear-dest-0.2.0-inplace"#

$trModule3 = TrNameS $trModule4

$trModule2 = "Compact.Pure.SExpr"#

$trModule1 = TrNameS $trModule2

$trModule = Module $trModule3 $trModule1

$krep_rAyX = KindRepTyConApp $tcChar []

$krep1_rAyY = KindRepTyConApp $tcInt []

$krep2_rAyZ = : $krep_rAyX []

$krep3_rAz0 = KindRepTyConApp $tcList $krep2_rAyZ

$tcSExpr2 = "SExpr"#

$tcSExpr1 = TrNameS $tcSExpr2

$tcSExpr
  = TyCon
      3572109794281785650#Word64
      15913491894426730941#Word64
      $trModule
      $tcSExpr1
      0#
      krep$*

$krep4_rAz1 = KindRepTyConApp $tcSExpr []

$krep5_rAz2 = KindRepFun $krep3_rAz0 $krep4_rAz1

$tc'SString1 = KindRepFun $krep1_rAyY $krep5_rAz2

$tc'SString3 = "'SString"#

$tc'SString2 = TrNameS $tc'SString3

$tc'SString
  = TyCon
      17716724114125274111#Word64
      18244096707463620172#Word64
      $trModule
      $tc'SString2
      0#
      $tc'SString1

$tc'SSymbol2 = "'SSymbol"#

$tc'SSymbol1 = TrNameS $tc'SSymbol2

$tc'SSymbol
  = TyCon
      3330124904155517398#Word64
      11176925349957043233#Word64
      $trModule
      $tc'SSymbol1
      0#
      $tc'SString1

$krep6_rAz3 = KindRepFun $krep1_rAyY $krep4_rAz1

$tc'SInteger1 = KindRepFun $krep1_rAyY $krep6_rAz3

$tc'SInteger3 = "'SInteger"#

$tc'SInteger2 = TrNameS $tc'SInteger3

$tc'SInteger
  = TyCon
      1338658106100468368#Word64
      17786884393368736581#Word64
      $trModule
      $tc'SInteger2
      0#
      $tc'SInteger1

$krep7_rAz4 = : $krep4_rAz1 []

$krep8_rAz5 = KindRepTyConApp $tcList $krep7_rAz4

$krep9_rAz6 = KindRepFun $krep8_rAz5 $krep4_rAz1

$tc'SList1 = KindRepFun $krep1_rAyY $krep9_rAz6

$tc'SList3 = "'SList"#

$tc'SList2 = TrNameS $tc'SList3

$tc'SList
  = TyCon
      4041426113362912888#Word64
      11445739887737731075#Word64
      $trModule
      $tc'SList2
      0#
      $tc'SList1

$tcSExprParseError2 = "SExprParseError"#

$tcSExprParseError1 = TrNameS $tcSExprParseError2

$tcSExprParseError
  = TyCon
      18116649097083754966#Word64
      14283015342769067813#Word64
      $trModule
      $tcSExprParseError1
      0#
      krep$*

$krep10_rAz7 = KindRepTyConApp $tcSExprParseError []

$tc'UnexpectedClosingParen1 = KindRepFun $krep1_rAyY $krep10_rAz7

$tc'UnexpectedClosingParen3 = "'UnexpectedClosingParen"#

$tc'UnexpectedClosingParen2 = TrNameS $tc'UnexpectedClosingParen3

$tc'UnexpectedClosingParen
  = TyCon
      12018412751050466855#Word64
      3849971491897843231#Word64
      $trModule
      $tc'UnexpectedClosingParen2
      0#
      $tc'UnexpectedClosingParen1

$tc'UnexpectedEOFSExpr2 = "'UnexpectedEOFSExpr"#

$tc'UnexpectedEOFSExpr1 = TrNameS $tc'UnexpectedEOFSExpr2

$tc'UnexpectedEOFSExpr
  = TyCon
      16915659219516742054#Word64
      10844311286454725518#Word64
      $trModule
      $tc'UnexpectedEOFSExpr1
      0#
      $tc'UnexpectedClosingParen1

$tc'UnexpectedEOFSList2 = "'UnexpectedEOFSList"#

$tc'UnexpectedEOFSList1 = TrNameS $tc'UnexpectedEOFSList2

$tc'UnexpectedEOFSList
  = TyCon
      18214365537096437558#Word64
      12805631621998589581#Word64
      $trModule
      $tc'UnexpectedEOFSList1
      0#
      $tc'UnexpectedClosingParen1

$tc'UnexpectedEOFSString2 = "'UnexpectedEOFSString"#

$tc'UnexpectedEOFSString1 = TrNameS $tc'UnexpectedEOFSString2

$tc'UnexpectedEOFSString
  = TyCon
      16061396066779803797#Word64
      10248281094764521503#Word64
      $trModule
      $tc'UnexpectedEOFSString1
      0#
      $tc'UnexpectedClosingParen1

$tc'UnexpectedContentAfter2 = "'UnexpectedContentAfter"#

$tc'UnexpectedContentAfter1 = TrNameS $tc'UnexpectedContentAfter2

$tc'UnexpectedContentAfter
  = TyCon
      10486264245993818094#Word64
      16265565067705732629#Word64
      $trModule
      $tc'UnexpectedContentAfter1
      0#
      $tc'UnexpectedClosingParen1

$fShowSExprParseError6
  = "Parse error: Encountered an unexpected closing parentheses at position "#

$fShowSExprParseError5
  = "Parse error: Ecountered EOF while expecting an SExpr at position "#

$fShowSExprParseError4
  = "Parse error: Encountered EOF in the middle of parsing an SList at position "#

$fShowSExprParseError3
  = "Parse error: Encountered EOF in the middle of parsing a quoted string at position "#

$fShowSExprParseError2
  = "Parse error: Encountered unexpected content after the SExpr at position "#

$fShowSExprParseError_$cshow
  = \ ds_dzHw ->
      case ds_dzHw of {
        UnexpectedClosingParen n_aywv ->
          unpackAppendCString#
            $fShowSExprParseError6
            (case n_aywv of { I# n1_avEg -> itos n1_avEg [] });
        UnexpectedEOFSExpr n_aywx ->
          unpackAppendCString#
            $fShowSExprParseError5
            (case n_aywx of { I# n1_avEg -> itos n1_avEg [] });
        UnexpectedEOFSList n_aywy ->
          unpackAppendCString#
            $fShowSExprParseError4
            (case n_aywy of { I# n1_avEg -> itos n1_avEg [] });
        UnexpectedEOFSString n_aywz ->
          unpackAppendCString#
            $fShowSExprParseError3
            (case n_aywz of { I# n1_avEg -> itos n1_avEg [] });
        UnexpectedContentAfter n_aywA ->
          unpackAppendCString#
            $fShowSExprParseError2
            (case n_aywA of { I# n1_avEg -> itos n1_avEg [] })
      }

$fShowSExprParseError_$cshowsPrec
  = \ _ x_aaSc s_aaSd ->
      ++ ($fShowSExprParseError_$cshow x_aaSc) s_aaSd

$fShowSExprParseError1
  = \ x_aaSc s_aaSd ->
      ++ ($fShowSExprParseError_$cshow x_aaSc) s_aaSd

$fShowSExprParseError_$cshowList
  = \ ls_aaS6 s_aaS7 ->
      showList__ $fShowSExprParseError1 ls_aaS6 s_aaS7

$fShowSExprParseError
  = C:Show
      $fShowSExprParseError_$cshowsPrec
      $fShowSExprParseError_$cshow
      $fShowSExprParseError_$cshowList

nextTokenAt1
  = \ bx_iAkT bx1_iAkU bx2_iAkV ->
      join { $w$j_sAmA ww_sAmx = (# bx_iAkT, bx1_iAkU, ww_sAmx #) } in
      join { exit_X0 = jump $w$j_sAmA bx2_iAkV } in
      joinrec {
        $wgo2_sAmI ww_sAmE eta_sAmG
          = case >=# ww_sAmE bx2_iAkV of {
              __DEFAULT ->
                case readWord8OffAddr# (plusAddr# bx_iAkT ww_sAmE) 0# eta_sAmG of
                { (# ipv1_iAjc, ipv2_iAjd #) ->
                case touch# bx1_iAkU ipv1_iAjc of s'_iAjf { __DEFAULT ->
                let { ww1_aAfQ = chr# (word2Int# (word8ToWord# ipv2_iAjd)) } in
                case $wisSpace ww1_aAfQ of {
                  False ->
                    case ww1_aAfQ of {
                      __DEFAULT -> jump $wgo2_sAmI (+# ww_sAmE 1#) s'_iAjf;
                      '"'# -> jump $w$j_sAmA ww_sAmE;
                      '('# -> jump $w$j_sAmA ww_sAmE;
                      ')'# -> jump $w$j_sAmA ww_sAmE
                    };
                  True -> jump $w$j_sAmA ww_sAmE
                }
                }
                };
              1# -> jump exit_X0
            }; } in
      jump $wgo2_sAmI 0# realWorld#

$wnextTokenAt
  = \ ww_sAmR ww1_sAmV ww2_sAmW ww3_sAmX ->
      case <=# ww_sAmR 0# of {
        __DEFAULT ->
          case >=# ww_sAmR ww3_sAmX of {
            __DEFAULT ->
              let { bx_iAkT = plusAddr# ww1_sAmV ww_sAmR } in
              let { bx2_iAkV = -# ww3_sAmX ww_sAmR } in
              join { $w$j_sAmA ww4_sAmx = (# bx_iAkT, ww2_sAmW, ww4_sAmx #) } in
              join { exit_X0 = jump $w$j_sAmA bx2_iAkV } in
              joinrec {
                $wgo2_sAmI ww4_sAmE eta_sAmG
                  = case >=# ww4_sAmE bx2_iAkV of {
                      __DEFAULT ->
                        case readWord8OffAddr# (plusAddr# bx_iAkT ww4_sAmE) 0# eta_sAmG of
                        { (# ipv1_iAjc, ipv2_iAjd #) ->
                        case touch# ww2_sAmW ipv1_iAjc of s'_iAjf { __DEFAULT ->
                        let { ww5_aAfQ = chr# (word2Int# (word8ToWord# ipv2_iAjd)) } in
                        case $wisSpace ww5_aAfQ of {
                          False ->
                            case ww5_aAfQ of {
                              __DEFAULT -> jump $wgo2_sAmI (+# ww4_sAmE 1#) s'_iAjf;
                              '"'# -> jump $w$j_sAmA ww4_sAmE;
                              '('# -> jump $w$j_sAmA ww4_sAmE;
                              ')'# -> jump $w$j_sAmA ww4_sAmE
                            };
                          True -> jump $w$j_sAmA ww4_sAmE
                        }
                        }
                        };
                      1# -> jump exit_X0
                    }; } in
              jump $wgo2_sAmI 0# realWorld#;
            1# -> nextTokenAt1 __NULL FinalPtr 0#
          };
        1# -> nextTokenAt1 ww1_sAmV ww2_sAmW ww3_sAmX
      }

nextTokenAt
  = \ i_sAmP bs_sAmT ->
      case i_sAmP of { I# ww_sAmR ->
      case bs_sAmT of { BS ww1_sAmV ww2_sAmW ww3_sAmX ->
      case $wnextTokenAt ww_sAmR ww1_sAmV ww2_sAmW ww3_sAmX of
      { (# ww4_sAqz, ww5_sAqA, ww6_sAqB #) ->
      BS ww4_sAqz ww5_sAqA ww6_sAqB
      }
      }
      }

defaultSExpr2 = I# -1#

defaultSExpr1 = I# 0#

defaultSExpr = SInteger defaultSExpr2 defaultSExpr1

parseStringWithoutDest'_x = C# '\n'#

Rec {
parseStringWithDest'_$s$wparseStringWithDest'1
  = \ @r_sAnV
      sc_sAxj
      sc1_sAxg
      sc2_sAxh
      sc3_sAxi
      sc4_sAxf
      ww_sAnt
      ww1_sAnx ->
      join {
        $j_sAgp
          = case ((sc4_sAxf `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
            of
            { Compact c#_iA5X ds_iA5Y bx_iA5Z ->
            runRW#
              (\ s0_iA5W ->
                 case compactContains# c#_iA5X defaultSExpr2 s0_iA5W of
                 { (# ipv_iA62, ipv1_iA63 #) ->
                 join {
                   $w$j_sAn8 root2_sAn3
                     = runRW#
                         (\ s1_iAdf ->
                            case anyToAddr# root2_sAn3 s1_iAdf of
                            { (# s2_iAdj, pXInRegion#_iAdk #) ->
                            case writeAddrOffAddr# ww_sAnt 0# pXInRegion#_iAdk s2_iAdj of
                            { __DEFAULT ->
                            runRW#
                              (\ s_iA6D ->
                                 case takeMVar# bx_iA5Z s_iA6D of { (# ipv2_iA79, ipv3_iA7a #) ->
                                 case ipv3_iA7a of { () ->
                                 case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                 case compactAddShallow#
                                        c#_iA5X
                                        ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                        ipv2_iA79
                                 of
                                 { (# ipv4_iA7i, ipv5_iA7j #) ->
                                 case anyToAddr# ipv5_iA7j ipv4_iA7i of
                                 { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                 case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#1_iA7n s4_iA7m
                                 of s5_iA7p
                                 { __DEFAULT ->
                                 case putMVar# bx_iA5Z () s5_iA7p of { __DEFAULT ->
                                 Left (UnexpectedEOFSString (I# sc_sAxj))
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 })
                            }
                            }) } in
                 case ipv1_iA63 of {
                   __DEFAULT ->
                     case takeMVar# bx_iA5Z ipv_iA62 of { (# ipv2_iA67, ipv3_iA68 #) ->
                     case ipv3_iA68 of { () ->
                     case compactAdd# c#_iA5X defaultSExpr2 ipv2_iA67 of
                     { (# ipv4_iA6d, ipv5_iA6e #) ->
                     case putMVar# bx_iA5Z () ipv4_iA6d of { __DEFAULT ->
                     jump $w$j_sAn8 ipv5_iA6e
                     }
                     }
                     }
                     };
                   1# -> jump $w$j_sAn8 defaultSExpr2
                 }
                 })
            } } in
      case <# sc_sAxj 0# of {
        __DEFAULT ->
          case >=# sc_sAxj sc3_sAxi of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAxg sc_sAxj) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAxh ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of ds_XO {
                __DEFAULT ->
                  case ((sc4_sAxf `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA6E ds1_iA6F bx_iA6G ->
                  runRW#
                    (\ s_iA6D ->
                       case takeMVar# bx_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                       case ipv3_iA80 of { () ->
                       case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                       case compactAddShallow#
                              c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                       of
                       { (# ipv4_iA88, ipv5_iA89 #) ->
                       case anyToAddr# ipv5_iA89 ipv4_iA88 of
                       { (# s1_iA8c, pXInRegion#_iA8d #) ->
                       case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#_iA8d s1_iA8c
                       of s2_iA8f
                       { __DEFAULT ->
                       case getSlots2# ipv5_iA89 s2_iA8f of
                       { (# ipv6_iA8h, ipv7_iA8i #) ->
                       case ipv7_iA8i of { (# d0#_sArG, d1#_sArH #) ->
                       case putMVar# bx_iA6G () ipv6_iA8h of { __DEFAULT ->
                       runRW#
                         (\ s0_iA5W ->
                            let { c_ayxX = C# ds_XO } in
                            case compactContains# c#_iA6E c_ayxX s0_iA5W of
                            { (# ipv8_iA62, ipv9_iA63 #) ->
                            case ipv9_iA63 of {
                              __DEFAULT ->
                                case takeMVar# bx_iA6G ipv8_iA62 of
                                { (# ipv10_iA67, ipv11_iA68 #) ->
                                case ipv11_iA68 of { () ->
                                case compactAdd# c#_iA6E c_ayxX ipv10_iA67 of
                                { (# ipv12_iA6d, ipv13_iA6e #) ->
                                case putMVar# bx_iA6G () ipv12_iA6d of { __DEFAULT ->
                                runRW#
                                  (\ s7_iAdf ->
                                     case anyToAddr# ipv13_iA6e s7_iAdf of
                                     { (# s8_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s8_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAxj 1#)
                                       sc1_sAxg
                                       sc2_sAxh
                                       sc3_sAxi
                                       sc4_sAxf
                                       ww_sAnt
                                       d1#_sArH
                                     }
                                     })
                                }
                                }
                                }
                                };
                              1# ->
                                runRW#
                                  (\ s4_iAdf ->
                                     case anyToAddr# c_ayxX s4_iAdf of
                                     { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s6_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAxj 1#)
                                       sc1_sAxg
                                       sc2_sAxh
                                       sc3_sAxi
                                       sc4_sAxf
                                       ww_sAnt
                                       d1#_sArH
                                     }
                                     })
                            }
                            })
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       })
                  };
                'n'# ->
                  case ((sc4_sAxf `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA6E ds1_iA6F bx_iA6G ->
                  runRW#
                    (\ s_iA6D ->
                       case takeMVar# bx_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                       case ipv3_iA80 of { () ->
                       case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                       case compactAddShallow#
                              c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                       of
                       { (# ipv4_iA88, ipv5_iA89 #) ->
                       case anyToAddr# ipv5_iA89 ipv4_iA88 of
                       { (# s1_iA8c, pXInRegion#_iA8d #) ->
                       case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#_iA8d s1_iA8c
                       of s2_iA8f
                       { __DEFAULT ->
                       case getSlots2# ipv5_iA89 s2_iA8f of
                       { (# ipv6_iA8h, ipv7_iA8i #) ->
                       case ipv7_iA8i of { (# d0#_sArK, d1#_sArL #) ->
                       case putMVar# bx_iA6G () ipv6_iA8h of { __DEFAULT ->
                       runRW#
                         (\ s0_iA5W ->
                            case compactContains# c#_iA6E parseStringWithoutDest'_x s0_iA5W of
                            { (# ipv8_iA62, ipv9_iA63 #) ->
                            case ipv9_iA63 of {
                              __DEFAULT ->
                                case takeMVar# bx_iA6G ipv8_iA62 of
                                { (# ipv10_iA67, ipv11_iA68 #) ->
                                case ipv11_iA68 of { () ->
                                case compactAdd# c#_iA6E parseStringWithoutDest'_x ipv10_iA67 of
                                { (# ipv12_iA6d, ipv13_iA6e #) ->
                                case putMVar# bx_iA6G () ipv12_iA6d of { __DEFAULT ->
                                runRW#
                                  (\ s7_iAdf ->
                                     case anyToAddr# ipv13_iA6e s7_iAdf of
                                     { (# s8_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArK 0# pXInRegion#1_iAdk s8_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAxj 1#)
                                       sc1_sAxg
                                       sc2_sAxh
                                       sc3_sAxi
                                       sc4_sAxf
                                       ww_sAnt
                                       d1#_sArL
                                     }
                                     })
                                }
                                }
                                }
                                };
                              1# ->
                                runRW#
                                  (\ s4_iAdf ->
                                     case anyToAddr# parseStringWithoutDest'_x s4_iAdf of
                                     { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArK 0# pXInRegion#1_iAdk s6_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAxj 1#)
                                       sc1_sAxg
                                       sc2_sAxh
                                       sc3_sAxi
                                       sc4_sAxf
                                       ww_sAnt
                                       d1#_sArL
                                     }
                                     })
                            }
                            })
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       })
                  }
              }
              }
              };
            1# -> jump $j_sAgp
          };
        1# -> jump $j_sAgp
      }

parseStringWithDest'_$s$wparseStringWithDest'
  = \ @r_sAnV
      sc_sAx5
      sc1_sAx2
      sc2_sAx3
      sc3_sAx4
      sc4_sAx1
      ww_sAnt
      ww1_sAnx ->
      join {
        $j_sAgp
          = case ((sc4_sAx1 `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
            of
            { Compact c#_iA5X ds_iA5Y bx_iA5Z ->
            runRW#
              (\ s0_iA5W ->
                 case compactContains# c#_iA5X defaultSExpr2 s0_iA5W of
                 { (# ipv_iA62, ipv1_iA63 #) ->
                 join {
                   $w$j_sAn8 root2_sAn3
                     = runRW#
                         (\ s1_iAdf ->
                            case anyToAddr# root2_sAn3 s1_iAdf of
                            { (# s2_iAdj, pXInRegion#_iAdk #) ->
                            case writeAddrOffAddr# ww_sAnt 0# pXInRegion#_iAdk s2_iAdj of
                            { __DEFAULT ->
                            runRW#
                              (\ s_iA6D ->
                                 case takeMVar# bx_iA5Z s_iA6D of { (# ipv2_iA79, ipv3_iA7a #) ->
                                 case ipv3_iA7a of { () ->
                                 case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                 case compactAddShallow#
                                        c#_iA5X
                                        ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                        ipv2_iA79
                                 of
                                 { (# ipv4_iA7i, ipv5_iA7j #) ->
                                 case anyToAddr# ipv5_iA7j ipv4_iA7i of
                                 { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                 case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#1_iA7n s4_iA7m
                                 of s5_iA7p
                                 { __DEFAULT ->
                                 case putMVar# bx_iA5Z () s5_iA7p of { __DEFAULT ->
                                 Left (UnexpectedEOFSString (I# sc_sAx5))
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 })
                            }
                            }) } in
                 case ipv1_iA63 of {
                   __DEFAULT ->
                     case takeMVar# bx_iA5Z ipv_iA62 of { (# ipv2_iA67, ipv3_iA68 #) ->
                     case ipv3_iA68 of { () ->
                     case compactAdd# c#_iA5X defaultSExpr2 ipv2_iA67 of
                     { (# ipv4_iA6d, ipv5_iA6e #) ->
                     case putMVar# bx_iA5Z () ipv4_iA6d of { __DEFAULT ->
                     jump $w$j_sAn8 ipv5_iA6e
                     }
                     }
                     }
                     };
                   1# -> jump $w$j_sAn8 defaultSExpr2
                 }
                 })
            } } in
      case <# sc_sAx5 0# of {
        __DEFAULT ->
          case >=# sc_sAx5 sc3_sAx4 of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAx2 sc_sAx5) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAx3 ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of ds_XO {
                __DEFAULT ->
                  case ((sc4_sAx1 `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA6E ds1_iA6F bx_iA6G ->
                  runRW#
                    (\ s_iA6D ->
                       case takeMVar# bx_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                       case ipv3_iA80 of { () ->
                       case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                       case compactAddShallow#
                              c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                       of
                       { (# ipv4_iA88, ipv5_iA89 #) ->
                       case anyToAddr# ipv5_iA89 ipv4_iA88 of
                       { (# s1_iA8c, pXInRegion#_iA8d #) ->
                       case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#_iA8d s1_iA8c
                       of s2_iA8f
                       { __DEFAULT ->
                       case getSlots2# ipv5_iA89 s2_iA8f of
                       { (# ipv6_iA8h, ipv7_iA8i #) ->
                       case ipv7_iA8i of { (# d0#_sArG, d1#_sArH #) ->
                       case putMVar# bx_iA6G () ipv6_iA8h of { __DEFAULT ->
                       runRW#
                         (\ s0_iA5W ->
                            let { c_ayxX = C# ds_XO } in
                            case compactContains# c#_iA6E c_ayxX s0_iA5W of
                            { (# ipv8_iA62, ipv9_iA63 #) ->
                            case ipv9_iA63 of {
                              __DEFAULT ->
                                case takeMVar# bx_iA6G ipv8_iA62 of
                                { (# ipv10_iA67, ipv11_iA68 #) ->
                                case ipv11_iA68 of { () ->
                                case compactAdd# c#_iA6E c_ayxX ipv10_iA67 of
                                { (# ipv12_iA6d, ipv13_iA6e #) ->
                                case putMVar# bx_iA6G () ipv12_iA6d of { __DEFAULT ->
                                runRW#
                                  (\ s7_iAdf ->
                                     case anyToAddr# ipv13_iA6e s7_iAdf of
                                     { (# s8_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s8_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAx5 1#)
                                       sc1_sAx2
                                       sc2_sAx3
                                       sc3_sAx4
                                       sc4_sAx1
                                       ww_sAnt
                                       d1#_sArH
                                     }
                                     })
                                }
                                }
                                }
                                };
                              1# ->
                                runRW#
                                  (\ s4_iAdf ->
                                     case anyToAddr# c_ayxX s4_iAdf of
                                     { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                     case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s6_iAdj of
                                     { __DEFAULT ->
                                     parseStringWithDest'_$s$wparseStringWithDest'
                                       (+# sc_sAx5 1#)
                                       sc1_sAx2
                                       sc2_sAx3
                                       sc3_sAx4
                                       sc4_sAx1
                                       ww_sAnt
                                       d1#_sArH
                                     }
                                     })
                            }
                            })
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       })
                  };
                '"'# ->
                  case ((sc4_sAx1 `cast` <Co:4> :: ...) Proxy) `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA5X ds1_iA5Y bx_iA5Z ->
                  runRW#
                    (\ s0_iA5W ->
                       case compactContains# c#_iA5X (I# sc_sAx5) s0_iA5W of
                       { (# ipv2_iA62, ipv3_iA63 #) ->
                       join {
                         $w$j_sAnk root2_sAnf
                           = runRW#
                               (\ s1_iAdf ->
                                  case anyToAddr# root2_sAnf s1_iAdf of
                                  { (# s2_iAdj, pXInRegion#_iAdk #) ->
                                  case writeAddrOffAddr# ww_sAnt 0# pXInRegion#_iAdk s2_iAdj of
                                  { __DEFAULT ->
                                  runRW#
                                    (\ s_iA6D ->
                                       case takeMVar# bx_iA5Z s_iA6D of
                                       { (# ipv4_iA79, ipv5_iA7a #) ->
                                       case ipv5_iA7a of { () ->
                                       case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                       case compactAddShallow#
                                              c#_iA5X
                                              ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                              ipv4_iA79
                                       of
                                       { (# ipv6_iA7i, ipv7_iA7j #) ->
                                       case anyToAddr# ipv7_iA7j ipv6_iA7i of
                                       { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                       case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#1_iA7n s4_iA7m
                                       of s5_iA7p
                                       { __DEFAULT ->
                                       case putMVar# bx_iA5Z () s5_iA7p of { __DEFAULT ->
                                       Right (I# sc_sAx5)
                                       }
                                       }
                                       }
                                       }
                                       }
                                       }
                                       })
                                  }
                                  }) } in
                       case ipv3_iA63 of {
                         __DEFAULT ->
                           case takeMVar# bx_iA5Z ipv2_iA62 of { (# ipv4_iA67, ipv5_iA68 #) ->
                           case ipv5_iA68 of { () ->
                           case compactAdd# c#_iA5X (I# sc_sAx5) ipv4_iA67 of
                           { (# ipv6_iA6d, ipv7_iA6e #) ->
                           case putMVar# bx_iA5Z () ipv6_iA6d of { __DEFAULT ->
                           jump $w$j_sAnk ipv7_iA6e
                           }
                           }
                           }
                           };
                         1# -> jump $w$j_sAnk (I# sc_sAx5)
                       }
                       })
                  };
                '\\'# ->
                  parseStringWithDest'_$s$wparseStringWithDest'1
                    (+# sc_sAx5 1#)
                    sc1_sAx2
                    sc2_sAx3
                    sc3_sAx4
                    sc4_sAx1
                    ww_sAnt
                    ww1_sAnx
              }
              }
              };
            1# -> jump $j_sAgp
          };
        1# -> jump $j_sAgp
      }
end Rec }

$wparseStringWithDest'
  = \ @r_sAnm
      $dReifies_sAnn
      bs_sAno
      i_sAnp
      escape_sAnq
      ww_sAnt
      ww1_sAnx ->
      case i_sAnp of wild_a3Rw { I# x_a3Rx ->
      join {
        $j_sAgp
          = case (($dReifies_sAnn `cast` <Co:4> :: ...) Proxy)
                 `cast` <Co:1> :: ...
            of
            { Compact c#_iA5X ds_iA5Y bx_iA5Z ->
            runRW#
              (\ s0_iA5W ->
                 case compactContains# c#_iA5X defaultSExpr2 s0_iA5W of
                 { (# ipv_iA62, ipv1_iA63 #) ->
                 join {
                   $w$j_sAn8 root2_sAn3
                     = runRW#
                         (\ s1_iAdf ->
                            case anyToAddr# root2_sAn3 s1_iAdf of
                            { (# s2_iAdj, pXInRegion#_iAdk #) ->
                            case writeAddrOffAddr# ww_sAnt 0# pXInRegion#_iAdk s2_iAdj of
                            { __DEFAULT ->
                            runRW#
                              (\ s_iA6D ->
                                 case takeMVar# bx_iA5Z s_iA6D of { (# ipv2_iA79, ipv3_iA7a #) ->
                                 case ipv3_iA7a of { () ->
                                 case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                 case compactAddShallow#
                                        c#_iA5X
                                        ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                        ipv2_iA79
                                 of
                                 { (# ipv4_iA7i, ipv5_iA7j #) ->
                                 case anyToAddr# ipv5_iA7j ipv4_iA7i of
                                 { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                 case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#1_iA7n s4_iA7m
                                 of s5_iA7p
                                 { __DEFAULT ->
                                 case putMVar# bx_iA5Z () s5_iA7p of { __DEFAULT ->
                                 Left (UnexpectedEOFSString wild_a3Rw)
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 })
                            }
                            }) } in
                 case ipv1_iA63 of {
                   __DEFAULT ->
                     case takeMVar# bx_iA5Z ipv_iA62 of { (# ipv2_iA67, ipv3_iA68 #) ->
                     case ipv3_iA68 of { () ->
                     case compactAdd# c#_iA5X defaultSExpr2 ipv2_iA67 of
                     { (# ipv4_iA6d, ipv5_iA6e #) ->
                     case putMVar# bx_iA5Z () ipv4_iA6d of { __DEFAULT ->
                     jump $w$j_sAn8 ipv5_iA6e
                     }
                     }
                     }
                     };
                   1# -> jump $w$j_sAn8 defaultSExpr2
                 }
                 })
            } } in
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_sAno of { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              let { c_sAiE = chr# (word2Int# (word8ToWord# ipv1_iA5K)) } in
              join {
                fail_sAdy _
                  = case (($dReifies_sAnn `cast` <Co:4> :: ...) Proxy)
                         `cast` <Co:1> :: ...
                    of
                    { Compact c#_iA6E ds1_iA6F bx4_iA6G ->
                    runRW#
                      (\ s_iA6D ->
                         case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                         case ipv3_iA80 of { () ->
                         case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                         case compactAddShallow#
                                c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                         of
                         { (# ipv4_iA88, ipv5_iA89 #) ->
                         case anyToAddr# ipv5_iA89 ipv4_iA88 of
                         { (# s1_iA8c, pXInRegion#_iA8d #) ->
                         case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#_iA8d s1_iA8c
                         of s2_iA8f
                         { __DEFAULT ->
                         case getSlots2# ipv5_iA89 s2_iA8f of
                         { (# ipv6_iA8h, ipv7_iA8i #) ->
                         case ipv7_iA8i of { (# d0#_sArG, d1#_sArH #) ->
                         case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                         runRW#
                           (\ s0_iA5W ->
                              let { c1_ayxX = C# c_sAiE } in
                              case compactContains# c#_iA6E c1_ayxX s0_iA5W of
                              { (# ipv8_iA62, ipv9_iA63 #) ->
                              case ipv9_iA63 of {
                                __DEFAULT ->
                                  case takeMVar# bx4_iA6G ipv8_iA62 of
                                  { (# ipv10_iA67, ipv11_iA68 #) ->
                                  case ipv11_iA68 of { () ->
                                  case compactAdd# c#_iA6E c1_ayxX ipv10_iA67 of
                                  { (# ipv12_iA6d, ipv13_iA6e #) ->
                                  case putMVar# bx4_iA6G () ipv12_iA6d of { __DEFAULT ->
                                  runRW#
                                    (\ s7_iAdf ->
                                       case anyToAddr# ipv13_iA6e s7_iAdf of
                                       { (# s8_iAdj, pXInRegion#1_iAdk #) ->
                                       case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s8_iAdj
                                       of
                                       { __DEFAULT ->
                                       parseStringWithDest'_$s$wparseStringWithDest'
                                         (+# x_a3Rx 1#)
                                         bx_iA5z
                                         bx1_iA5A
                                         bx2_iA5B
                                         $dReifies_sAnn
                                         ww_sAnt
                                         d1#_sArH
                                       }
                                       })
                                  }
                                  }
                                  }
                                  };
                                1# ->
                                  runRW#
                                    (\ s4_iAdf ->
                                       case anyToAddr# c1_ayxX s4_iAdf of
                                       { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                       case writeAddrOffAddr# d0#_sArG 0# pXInRegion#1_iAdk s6_iAdj
                                       of
                                       { __DEFAULT ->
                                       parseStringWithDest'_$s$wparseStringWithDest'
                                         (+# x_a3Rx 1#)
                                         bx_iA5z
                                         bx1_iA5A
                                         bx2_iA5B
                                         $dReifies_sAnn
                                         ww_sAnt
                                         d1#_sArH
                                       }
                                       })
                              }
                              })
                         }
                         }
                         }
                         }
                         }
                         }
                         }
                         }
                         })
                    } } in
              case c_sAiE of {
                __DEFAULT -> jump fail_sAdy (##);
                '"'# ->
                  case escape_sAnq of {
                    False ->
                      case (($dReifies_sAnn `cast` <Co:4> :: ...) Proxy)
                           `cast` <Co:1> :: ...
                      of
                      { Compact c#_iA5X ds1_iA5Y bx4_iA5Z ->
                      runRW#
                        (\ s0_iA5W ->
                           case compactContains# c#_iA5X wild_a3Rw s0_iA5W of
                           { (# ipv2_iA62, ipv3_iA63 #) ->
                           join {
                             $w$j_sAnk root2_sAnf
                               = runRW#
                                   (\ s1_iAdf ->
                                      case anyToAddr# root2_sAnf s1_iAdf of
                                      { (# s2_iAdj, pXInRegion#_iAdk #) ->
                                      case writeAddrOffAddr# ww_sAnt 0# pXInRegion#_iAdk s2_iAdj of
                                      { __DEFAULT ->
                                      runRW#
                                        (\ s_iA6D ->
                                           case takeMVar# bx4_iA5Z s_iA6D of
                                           { (# ipv4_iA79, ipv5_iA7a #) ->
                                           case ipv5_iA7a of { () ->
                                           case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                           case compactAddShallow#
                                                  c#_iA5X
                                                  ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                                  ipv4_iA79
                                           of
                                           { (# ipv6_iA7i, ipv7_iA7j #) ->
                                           case anyToAddr# ipv7_iA7j ipv6_iA7i of
                                           { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                           case writeAddrOffAddr#
                                                  ww1_sAnx 0# pXInRegion#1_iA7n s4_iA7m
                                           of s5_iA7p
                                           { __DEFAULT ->
                                           case putMVar# bx4_iA5Z () s5_iA7p of { __DEFAULT ->
                                           Right wild_a3Rw
                                           }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           })
                                      }
                                      }) } in
                           case ipv3_iA63 of {
                             __DEFAULT ->
                               case takeMVar# bx4_iA5Z ipv2_iA62 of
                               { (# ipv4_iA67, ipv5_iA68 #) ->
                               case ipv5_iA68 of { () ->
                               case compactAdd# c#_iA5X wild_a3Rw ipv4_iA67 of
                               { (# ipv6_iA6d, ipv7_iA6e #) ->
                               case putMVar# bx4_iA5Z () ipv6_iA6d of { __DEFAULT ->
                               jump $w$j_sAnk ipv7_iA6e
                               }
                               }
                               }
                               };
                             1# -> jump $w$j_sAnk wild_a3Rw
                           }
                           })
                      };
                    True -> jump fail_sAdy (##)
                  };
                '\\'# ->
                  case escape_sAnq of {
                    False ->
                      parseStringWithDest'_$s$wparseStringWithDest'1
                        (+# x_a3Rx 1#)
                        bx_iA5z
                        bx1_iA5A
                        bx2_iA5B
                        $dReifies_sAnn
                        ww_sAnt
                        ww1_sAnx;
                    True -> jump fail_sAdy (##)
                  };
                'n'# ->
                  case escape_sAnq of {
                    False -> jump fail_sAdy (##);
                    True ->
                      case (($dReifies_sAnn `cast` <Co:4> :: ...) Proxy)
                           `cast` <Co:1> :: ...
                      of
                      { Compact c#_iA6E ds1_iA6F bx4_iA6G ->
                      runRW#
                        (\ s_iA6D ->
                           case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                           case ipv3_iA80 of { () ->
                           case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                           case compactAddShallow#
                                  c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                           of
                           { (# ipv4_iA88, ipv5_iA89 #) ->
                           case anyToAddr# ipv5_iA89 ipv4_iA88 of
                           { (# s1_iA8c, pXInRegion#_iA8d #) ->
                           case writeAddrOffAddr# ww1_sAnx 0# pXInRegion#_iA8d s1_iA8c
                           of s2_iA8f
                           { __DEFAULT ->
                           case getSlots2# ipv5_iA89 s2_iA8f of
                           { (# ipv6_iA8h, ipv7_iA8i #) ->
                           case ipv7_iA8i of { (# d0#_sArK, d1#_sArL #) ->
                           case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                           runRW#
                             (\ s0_iA5W ->
                                case compactContains# c#_iA6E parseStringWithoutDest'_x s0_iA5W of
                                { (# ipv8_iA62, ipv9_iA63 #) ->
                                case ipv9_iA63 of {
                                  __DEFAULT ->
                                    case takeMVar# bx4_iA6G ipv8_iA62 of
                                    { (# ipv10_iA67, ipv11_iA68 #) ->
                                    case ipv11_iA68 of { () ->
                                    case compactAdd# c#_iA6E parseStringWithoutDest'_x ipv10_iA67 of
                                    { (# ipv12_iA6d, ipv13_iA6e #) ->
                                    case putMVar# bx4_iA6G () ipv12_iA6d of { __DEFAULT ->
                                    runRW#
                                      (\ s7_iAdf ->
                                         case anyToAddr# ipv13_iA6e s7_iAdf of
                                         { (# s8_iAdj, pXInRegion#1_iAdk #) ->
                                         case writeAddrOffAddr#
                                                d0#_sArK 0# pXInRegion#1_iAdk s8_iAdj
                                         of
                                         { __DEFAULT ->
                                         parseStringWithDest'_$s$wparseStringWithDest'
                                           (+# x_a3Rx 1#)
                                           bx_iA5z
                                           bx1_iA5A
                                           bx2_iA5B
                                           $dReifies_sAnn
                                           ww_sAnt
                                           d1#_sArL
                                         }
                                         })
                                    }
                                    }
                                    }
                                    };
                                  1# ->
                                    runRW#
                                      (\ s4_iAdf ->
                                         case anyToAddr# parseStringWithoutDest'_x s4_iAdf of
                                         { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                         case writeAddrOffAddr#
                                                d0#_sArK 0# pXInRegion#1_iAdk s6_iAdj
                                         of
                                         { __DEFAULT ->
                                         parseStringWithDest'_$s$wparseStringWithDest'
                                           (+# x_a3Rx 1#)
                                           bx_iA5z
                                           bx1_iA5A
                                           bx2_iA5B
                                           $dReifies_sAnn
                                           ww_sAnt
                                           d1#_sArL
                                         }
                                         })
                                }
                                })
                           }
                           }
                           }
                           }
                           }
                           }
                           }
                           }
                           })
                      }
                  }
              }
              }
              };
            1# -> jump $j_sAgp
          }
          };
        1# -> jump $j_sAgp
      }
      }

parseStringWithDest'
  = \ @r_sAnm
      $dReifies_sAnn
      bs_sAno
      i_sAnp
      escape_sAnq
      dEndPos_sAnr
      d_sAnv ->
      case dEndPos_sAnr of { Dest ww_sAnt ->
      case d_sAnv of { Dest ww1_sAnx ->
      $wparseStringWithDest'
        $dReifies_sAnn bs_sAno i_sAnp escape_sAnq ww_sAnt ww1_sAnx
      }
      }

Rec {
$wparseWithDest'
  = \ @r_sAnV $dReifies_sAnW bs_sAnX i_sAnY ww_sAo1 ->
      case i_sAnY of wild_a3Rw { I# x_a3Rx ->
      join {
        $j_sAgR
          = case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                 `cast` <Co:1> :: ...
            of
            { Compact c#_iA5X ds_iA5Y bx_iA5Z ->
            runRW#
              (\ s0_iA5W ->
                 case compactContains# c#_iA5X defaultSExpr s0_iA5W of
                 { (# ipv_iA62, ipv1_iA63 #) ->
                 case ipv1_iA63 of {
                   __DEFAULT ->
                     case takeMVar# bx_iA5Z ipv_iA62 of { (# ipv2_iA67, ipv3_iA68 #) ->
                     case ipv3_iA68 of { () ->
                     case compactAdd# c#_iA5X defaultSExpr ipv2_iA67 of
                     { (# ipv4_iA6d, ipv5_iA6e #) ->
                     case putMVar# bx_iA5Z () ipv4_iA6d of { __DEFAULT ->
                     runRW#
                       (\ s1_iAdf ->
                          case anyToAddr# ipv5_iA6e s1_iAdf of
                          { (# s2_iAdj, pXInRegion#_iAdk #) ->
                          case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iAdk s2_iAdj of
                          { __DEFAULT ->
                          Left (UnexpectedEOFSExpr wild_a3Rw)
                          }
                          })
                     }
                     }
                     }
                     };
                   1# ->
                     runRW#
                       (\ s1_iAdf ->
                          case anyToAddr# defaultSExpr s1_iAdf of
                          { (# s2_iAdj, pXInRegion#_iAdk #) ->
                          case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iAdk s2_iAdj of
                          { __DEFAULT ->
                          Left (UnexpectedEOFSExpr wild_a3Rw)
                          }
                          })
                 }
                 })
            } } in
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_sAnX of wild1_iA5r { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of {
                __DEFAULT ->
                  case $wnextTokenAt x_a3Rx bx_iA5z bx1_iA5A bx2_iA5B of
                  { (# ww1_sAqz, ww2_sAqA, ww3_sAqB #) ->
                  case <=# ww3_sAqB 0# of {
                    __DEFAULT ->
                      join {
                        fail_sAdI _
                          = case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                                 `cast` <Co:1> :: ...
                            of
                            { Compact c#_iA6E ds3_iA6F bx4_iA6G ->
                            runRW#
                              (\ s_iA6D ->
                                 case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                                 case ipv3_iA80 of { () ->
                                 case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                                 case compactAddShallow#
                                        c#_iA6E
                                        ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                        ipv2_iA7Z
                                 of
                                 { (# ipv4_iA88, ipv5_iA89 #) ->
                                 case anyToAddr# ipv5_iA89 ipv4_iA88 of
                                 { (# s1_iA8c, pXInRegion#_iA8d #) ->
                                 case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iA8d s1_iA8c
                                 of s2_iA8f
                                 { __DEFAULT ->
                                 case getSlots2# ipv5_iA89 s2_iA8f of
                                 { (# ipv6_iA8h, ipv7_iA8i #) ->
                                 case ipv7_iA8i of { (# d0#_sArO, d1#_sArP #) ->
                                 case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                                 runRW#
                                   (\ s0_iA5W ->
                                      let { endPos1_sAiF = -# (+# x_a3Rx ww3_sAqB) 1# } in
                                      let { endPos2_sAdE = I# endPos1_sAiF } in
                                      case compactContains# c#_iA6E endPos2_sAdE s0_iA5W of
                                      { (# ipv8_iA62, ipv9_iA63 #) ->
                                      join {
                                        $w$j_sAnJ root2_sAnE
                                          = runRW#
                                              (\ s4_iAdf ->
                                                 case anyToAddr# root2_sAnE s4_iAdf of
                                                 { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                                 case writeAddrOffAddr#
                                                        d0#_sArO 0# pXInRegion#1_iAdk s6_iAdj
                                                 of
                                                 { __DEFAULT ->
                                                 runRW#
                                                   (\ s8_XU ->
                                                      let {
                                                        x1_sAdG
                                                          = $wunpackAppendCharsLazy
                                                              ww1_sAqz ww2_sAqA ww3_sAqB [] } in
                                                      case compactContains# c#_iA6E x1_sAdG s8_XU of
                                                      { (# ipv10_XW, ipv11_XX #) ->
                                                      case ipv11_XX of {
                                                        __DEFAULT ->
                                                          case takeMVar# bx4_iA6G ipv10_XW of
                                                          { (# ipv12_iA67, ipv13_iA68 #) ->
                                                          case ipv13_iA68 of { () ->
                                                          case compactAdd#
                                                                 c#_iA6E x1_sAdG ipv12_iA67
                                                          of
                                                          { (# ipv14_iA6d, ipv15_iA6e #) ->
                                                          case putMVar# bx4_iA6G () ipv14_iA6d of
                                                          { __DEFAULT ->
                                                          runRW#
                                                            (\ s10_X11 ->
                                                               case anyToAddr# ipv15_iA6e s10_X11 of
                                                               { (# s11_X13, pXInRegion#2_X14 #) ->
                                                               case writeAddrOffAddr#
                                                                      d1#_sArP
                                                                      0#
                                                                      pXInRegion#2_X14
                                                                      s11_X13
                                                               of
                                                               { __DEFAULT ->
                                                               Right endPos2_sAdE
                                                               }
                                                               })
                                                          }
                                                          }
                                                          }
                                                          };
                                                        1# ->
                                                          runRW#
                                                            (\ s9_X11 ->
                                                               case anyToAddr# x1_sAdG s9_X11 of
                                                               { (# s10_X13, pXInRegion#2_X14 #) ->
                                                               case writeAddrOffAddr#
                                                                      d1#_sArP
                                                                      0#
                                                                      pXInRegion#2_X14
                                                                      s10_X13
                                                               of
                                                               { __DEFAULT ->
                                                               Right endPos2_sAdE
                                                               }
                                                               })
                                                      }
                                                      })
                                                 }
                                                 }) } in
                                      case ipv9_iA63 of {
                                        __DEFAULT ->
                                          case takeMVar# bx4_iA6G ipv8_iA62 of
                                          { (# ipv10_iA67, ipv11_iA68 #) ->
                                          case ipv11_iA68 of { () ->
                                          case compactAdd# c#_iA6E endPos2_sAdE ipv10_iA67 of
                                          { (# ipv12_iA6d, ipv13_iA6e #) ->
                                          case putMVar# bx4_iA6G () ipv12_iA6d of { __DEFAULT ->
                                          jump $w$j_sAnJ ipv13_iA6e
                                          }
                                          }
                                          }
                                          };
                                        1# -> jump $w$j_sAnJ endPos2_sAdE
                                      }
                                      })
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 })
                            } } in
                      case readInt (BS ww1_sAqz ww2_sAqA ww3_sAqB) of {
                        Nothing -> jump fail_sAdI (##);
                        Just ds1_dzCp ->
                          case ds1_dzCp of { (int_ayyw, remaining_ayyx) ->
                          case remaining_ayyx of { BS bx4_XT bx5_XU bx6_XV ->
                          case <=# bx6_XV 0# of {
                            __DEFAULT -> jump fail_sAdI (##);
                            1# ->
                              case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                                   `cast` <Co:1> :: ...
                              of
                              { Compact c#_iA6E ds3_iA6F bx7_iA6G ->
                              runRW#
                                (\ s_iA6D ->
                                   case takeMVar# bx7_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                                   case ipv3_iA80 of { () ->
                                   case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                                   case compactAddShallow#
                                          c#_iA6E
                                          ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                          ipv2_iA7Z
                                   of
                                   { (# ipv4_iA88, ipv5_iA89 #) ->
                                   case anyToAddr# ipv5_iA89 ipv4_iA88 of
                                   { (# s1_iA8c, pXInRegion#_iA8d #) ->
                                   case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iA8d s1_iA8c
                                   of s2_iA8f
                                   { __DEFAULT ->
                                   case getSlots2# ipv5_iA89 s2_iA8f of
                                   { (# ipv6_iA8h, ipv7_iA8i #) ->
                                   case ipv7_iA8i of { (# d0#_sArS, d1#_sArT #) ->
                                   case putMVar# bx7_iA6G () ipv6_iA8h of { __DEFAULT ->
                                   runRW#
                                     (\ s0_iA5W ->
                                        let { endPos1_sAiG = -# (+# x_a3Rx ww3_sAqB) 1# } in
                                        let { endPos2_sAdK = I# endPos1_sAiG } in
                                        case compactContains# c#_iA6E endPos2_sAdK s0_iA5W of
                                        { (# ipv8_iA62, ipv9_iA63 #) ->
                                        join {
                                          $w$j_sAnT root2_sAnO
                                            = runRW#
                                                (\ s4_iAdf ->
                                                   case anyToAddr# root2_sAnO s4_iAdf of
                                                   { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                                   case writeAddrOffAddr#
                                                          d0#_sArS 0# pXInRegion#1_iAdk s6_iAdj
                                                   of
                                                   { __DEFAULT ->
                                                   runRW#
                                                     (\ s8_X11 ->
                                                        case compactContains#
                                                               c#_iA6E int_ayyw s8_X11
                                                        of
                                                        { (# ipv10_X13, ipv11_X14 #) ->
                                                        case ipv11_X14 of {
                                                          __DEFAULT ->
                                                            case takeMVar# bx7_iA6G ipv10_X13 of
                                                            { (# ipv12_iA67, ipv13_iA68 #) ->
                                                            case ipv13_iA68 of { () ->
                                                            case compactAdd#
                                                                   c#_iA6E int_ayyw ipv12_iA67
                                                            of
                                                            { (# ipv14_iA6d, ipv15_iA6e #) ->
                                                            case putMVar# bx7_iA6G () ipv14_iA6d of
                                                            { __DEFAULT ->
                                                            runRW#
                                                              (\ s10_X18 ->
                                                                 case anyToAddr# ipv15_iA6e s10_X18
                                                                 of
                                                                 { (# s11_X1a,
                                                                      pXInRegion#2_X1b #) ->
                                                                 case writeAddrOffAddr#
                                                                        d1#_sArT
                                                                        0#
                                                                        pXInRegion#2_X1b
                                                                        s11_X1a
                                                                 of
                                                                 { __DEFAULT ->
                                                                 Right endPos2_sAdK
                                                                 }
                                                                 })
                                                            }
                                                            }
                                                            }
                                                            };
                                                          1# ->
                                                            runRW#
                                                              (\ s9_X18 ->
                                                                 case anyToAddr# int_ayyw s9_X18 of
                                                                 { (# s10_X1a,
                                                                      pXInRegion#2_X1b #) ->
                                                                 case writeAddrOffAddr#
                                                                        d1#_sArT
                                                                        0#
                                                                        pXInRegion#2_X1b
                                                                        s10_X1a
                                                                 of
                                                                 { __DEFAULT ->
                                                                 Right endPos2_sAdK
                                                                 }
                                                                 })
                                                        }
                                                        })
                                                   }
                                                   }) } in
                                        case ipv9_iA63 of {
                                          __DEFAULT ->
                                            case takeMVar# bx7_iA6G ipv8_iA62 of
                                            { (# ipv10_iA67, ipv11_iA68 #) ->
                                            case ipv11_iA68 of { () ->
                                            case compactAdd# c#_iA6E endPos2_sAdK ipv10_iA67 of
                                            { (# ipv12_iA6d, ipv13_iA6e #) ->
                                            case putMVar# bx7_iA6G () ipv12_iA6d of { __DEFAULT ->
                                            jump $w$j_sAnT ipv13_iA6e
                                            }
                                            }
                                            }
                                            };
                                          1# -> jump $w$j_sAnT endPos2_sAdK
                                        }
                                        })
                                   }
                                   }
                                   }
                                   }
                                   }
                                   }
                                   }
                                   }
                                   })
                              }
                          }
                          }
                          }
                      };
                    1# ->
                      $wparseWithDest'
                        $dReifies_sAnW wild1_iA5r (I# (+# x_a3Rx 1#)) ww_sAo1
                  }
                  };
                '"'# ->
                  case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                       `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA6E ds1_iA6F bx4_iA6G ->
                  runRW#
                    (\ s_iA6D ->
                       case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                       case ipv3_iA80 of { () ->
                       case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                       case compactAddShallow#
                              c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                       of
                       { (# ipv4_iA88, ipv5_iA89 #) ->
                       case anyToAddr# ipv5_iA89 ipv4_iA88 of
                       { (# s1_iA8c, pXInRegion#_iA8d #) ->
                       case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iA8d s1_iA8c
                       of s2_iA8f
                       { __DEFAULT ->
                       case getSlots2# ipv5_iA89 s2_iA8f of
                       { (# ipv6_iA8h, ipv7_iA8i #) ->
                       case ipv7_iA8i of { (# d0#_sArW, d1#_sArX #) ->
                       case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                       parseStringWithDest'_$s$wparseStringWithDest'
                         (+# x_a3Rx 1#)
                         bx_iA5z
                         bx1_iA5A
                         bx2_iA5B
                         $dReifies_sAnW
                         d0#_sArW
                         d1#_sArX
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       })
                  };
                '('# ->
                  case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                       `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA6E ds1_iA6F bx4_iA6G ->
                  runRW#
                    (\ s_iA6D ->
                       case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                       case ipv3_iA80 of { () ->
                       case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                       case compactAddShallow#
                              c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                       of
                       { (# ipv4_iA88, ipv5_iA89 #) ->
                       case anyToAddr# ipv5_iA89 ipv4_iA88 of
                       { (# s1_iA8c, pXInRegion#_iA8d #) ->
                       case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iA8d s1_iA8c
                       of s2_iA8f
                       { __DEFAULT ->
                       case getSlots2# ipv5_iA89 s2_iA8f of
                       { (# ipv6_iA8h, ipv7_iA8i #) ->
                       case ipv7_iA8i of { (# d0#_sAs0, d1#_sAs1 #) ->
                       case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                       $wparseListWithDest'
                         $dReifies_sAnW wild1_iA5r (I# (+# x_a3Rx 1#)) d0#_sAs0 d1#_sAs1
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       }
                       })
                  };
                ')'# ->
                  case (($dReifies_sAnW `cast` <Co:4> :: ...) Proxy)
                       `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA5X ds1_iA5Y bx4_iA5Z ->
                  runRW#
                    (\ s0_iA5W ->
                       case compactContains# c#_iA5X defaultSExpr s0_iA5W of
                       { (# ipv2_iA62, ipv3_iA63 #) ->
                       case ipv3_iA63 of {
                         __DEFAULT ->
                           case takeMVar# bx4_iA5Z ipv2_iA62 of
                           { (# ipv4_iA67, ipv5_iA68 #) ->
                           case ipv5_iA68 of { () ->
                           case compactAdd# c#_iA5X defaultSExpr ipv4_iA67 of
                           { (# ipv6_iA6d, ipv7_iA6e #) ->
                           case putMVar# bx4_iA5Z () ipv6_iA6d of { __DEFAULT ->
                           runRW#
                             (\ s1_iAdf ->
                                case anyToAddr# ipv7_iA6e s1_iAdf of
                                { (# s2_iAdj, pXInRegion#_iAdk #) ->
                                case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iAdk s2_iAdj of
                                { __DEFAULT ->
                                Left (UnexpectedClosingParen wild_a3Rw)
                                }
                                })
                           }
                           }
                           }
                           };
                         1# ->
                           runRW#
                             (\ s1_iAdf ->
                                case anyToAddr# defaultSExpr s1_iAdf of
                                { (# s2_iAdj, pXInRegion#_iAdk #) ->
                                case writeAddrOffAddr# ww_sAo1 0# pXInRegion#_iAdk s2_iAdj of
                                { __DEFAULT ->
                                Left (UnexpectedClosingParen wild_a3Rw)
                                }
                                })
                       }
                       })
                  }
              }
              }
              };
            1# -> jump $j_sAgR
          }
          };
        1# -> jump $j_sAgR
      }
      }

$wparseListWithDest'
  = \ @r_sAot $dReifies_sAou bs_sAov i_sAow ww_sAoz ww1_sAoD ->
      case i_sAow of wild_a3Rw { I# x_a3Rx ->
      join {
        $j_sAgZ
          = case (($dReifies_sAou `cast` <Co:4> :: ...) Proxy)
                 `cast` <Co:1> :: ...
            of
            { Compact c#_iA5X ds_iA5Y bx_iA5Z ->
            runRW#
              (\ s0_iA5W ->
                 case compactContains# c#_iA5X defaultSExpr2 s0_iA5W of
                 { (# ipv_iA62, ipv1_iA63 #) ->
                 join {
                   $w$j_sAob root2_sAo6
                     = runRW#
                         (\ s1_iAdf ->
                            case anyToAddr# root2_sAo6 s1_iAdf of
                            { (# s2_iAdj, pXInRegion#_iAdk #) ->
                            case writeAddrOffAddr# ww_sAoz 0# pXInRegion#_iAdk s2_iAdj of
                            { __DEFAULT ->
                            runRW#
                              (\ s_iA6D ->
                                 case takeMVar# bx_iA5Z s_iA6D of { (# ipv2_iA79, ipv3_iA7a #) ->
                                 case ipv3_iA7a of { () ->
                                 case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                 case compactAddShallow#
                                        c#_iA5X
                                        ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                        ipv2_iA79
                                 of
                                 { (# ipv4_iA7i, ipv5_iA7j #) ->
                                 case anyToAddr# ipv5_iA7j ipv4_iA7i of
                                 { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                 case writeAddrOffAddr# ww1_sAoD 0# pXInRegion#1_iA7n s4_iA7m
                                 of s5_iA7p
                                 { __DEFAULT ->
                                 case putMVar# bx_iA5Z () s5_iA7p of { __DEFAULT ->
                                 Left (UnexpectedEOFSList wild_a3Rw)
                                 }
                                 }
                                 }
                                 }
                                 }
                                 }
                                 })
                            }
                            }) } in
                 case ipv1_iA63 of {
                   __DEFAULT ->
                     case takeMVar# bx_iA5Z ipv_iA62 of { (# ipv2_iA67, ipv3_iA68 #) ->
                     case ipv3_iA68 of { () ->
                     case compactAdd# c#_iA5X defaultSExpr2 ipv2_iA67 of
                     { (# ipv4_iA6d, ipv5_iA6e #) ->
                     case putMVar# bx_iA5Z () ipv4_iA6d of { __DEFAULT ->
                     jump $w$j_sAob ipv5_iA6e
                     }
                     }
                     }
                     };
                   1# -> jump $w$j_sAob defaultSExpr2
                 }
                 })
            } } in
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_sAov of wild1_iA5r { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of wild2_XN {
                __DEFAULT ->
                  case $wisSpace wild2_XN of {
                    False ->
                      case (($dReifies_sAou `cast` <Co:4> :: ...) Proxy)
                           `cast` <Co:1> :: ...
                      of
                      { Compact c#_iA6E ds_iA6F bx4_iA6G ->
                      runRW#
                        (\ s_iA6D ->
                           case takeMVar# bx4_iA6G s_iA6D of { (# ipv2_iA7Z, ipv3_iA80 #) ->
                           case ipv3_iA80 of { () ->
                           case unsafeEqualityProof of { UnsafeRefl co_iA84 ->
                           case compactAddShallow#
                                  c#_iA6E ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...) ipv2_iA7Z
                           of
                           { (# ipv4_iA88, ipv5_iA89 #) ->
                           case anyToAddr# ipv5_iA89 ipv4_iA88 of
                           { (# s1_iA8c, pXInRegion#_iA8d #) ->
                           case writeAddrOffAddr# ww1_sAoD 0# pXInRegion#_iA8d s1_iA8c
                           of s2_iA8f
                           { __DEFAULT ->
                           case getSlots2# ipv5_iA89 s2_iA8f of
                           { (# ipv6_iA8h, ipv7_iA8i #) ->
                           case ipv7_iA8i of { (# d0#_sAs4, d1#_sAs5 #) ->
                           case putMVar# bx4_iA6G () ipv6_iA8h of { __DEFAULT ->
                           case $wparseWithDest' $dReifies_sAou wild1_iA5r wild_a3Rw d0#_sAs4
                           of wild9_XQ {
                             Left err_ayyf ->
                               runRW#
                                 (\ s0_iA5W ->
                                    case compactContains# c#_iA6E defaultSExpr2 s0_iA5W of
                                    { (# ipv8_iA62, ipv9_iA63 #) ->
                                    join {
                                      $w$j_sAok root2_sAof
                                        = runRW#
                                            (\ s4_iAdf ->
                                               case anyToAddr# root2_sAof s4_iAdf of
                                               { (# s6_iAdj, pXInRegion#1_iAdk #) ->
                                               case writeAddrOffAddr#
                                                      ww_sAoz 0# pXInRegion#1_iAdk s6_iAdj
                                               of
                                               { __DEFAULT ->
                                               runRW#
                                                 (\ s8_XV ->
                                                    case takeMVar# bx4_iA6G s8_XV of
                                                    { (# ipv10_iA79, ipv11_iA7a #) ->
                                                    case ipv11_iA7a of { () ->
                                                    case unsafeEqualityProof of
                                                    { UnsafeRefl co1_iA7e ->
                                                    case compactAddShallow#
                                                           c#_iA6E
                                                           ((reifyCtorInfoPtr# (##))
                                                            `cast` <Co:3> :: ...)
                                                           ipv10_iA79
                                                    of
                                                    { (# ipv12_iA7i, ipv13_iA7j #) ->
                                                    case anyToAddr# ipv13_iA7j ipv12_iA7i of
                                                    { (# s9_iA7m, pXInRegion#2_iA7n #) ->
                                                    case writeAddrOffAddr#
                                                           d1#_sAs5 0# pXInRegion#2_iA7n s9_iA7m
                                                    of s10_iA7p
                                                    { __DEFAULT ->
                                                    case putMVar# bx4_iA6G () s10_iA7p of
                                                    { __DEFAULT ->
                                                    wild9_XQ
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                    })
                                               }
                                               }) } in
                                    case ipv9_iA63 of {
                                      __DEFAULT ->
                                        case takeMVar# bx4_iA6G ipv8_iA62 of
                                        { (# ipv10_iA67, ipv11_iA68 #) ->
                                        case ipv11_iA68 of { () ->
                                        case compactAdd# c#_iA6E defaultSExpr2 ipv10_iA67 of
                                        { (# ipv12_iA6d, ipv13_iA6e #) ->
                                        case putMVar# bx4_iA6G () ipv12_iA6d of { __DEFAULT ->
                                        jump $w$j_sAok ipv13_iA6e
                                        }
                                        }
                                        }
                                        };
                                      1# -> jump $w$j_sAok defaultSExpr2
                                    }
                                    });
                             Right childrenEndPos_ayyg ->
                               case childrenEndPos_ayyg of { I# i1_iA8v ->
                               $wparseListWithDest'
                                 $dReifies_sAou wild1_iA5r (I# (+# i1_iA8v 1#)) ww_sAoz d1#_sAs5
                               }
                           }
                           }
                           }
                           }
                           }
                           }
                           }
                           }
                           }
                           })
                      };
                    True ->
                      $wparseListWithDest'
                        $dReifies_sAou wild1_iA5r (I# (+# x_a3Rx 1#)) ww_sAoz ww1_sAoD
                  };
                ')'# ->
                  case (($dReifies_sAou `cast` <Co:4> :: ...) Proxy)
                       `cast` <Co:1> :: ...
                  of
                  { Compact c#_iA5X ds_iA5Y bx4_iA5Z ->
                  runRW#
                    (\ s0_iA5W ->
                       case compactContains# c#_iA5X wild_a3Rw s0_iA5W of
                       { (# ipv2_iA62, ipv3_iA63 #) ->
                       join {
                         $w$j_sAor root2_sAom
                           = runRW#
                               (\ s1_iAdf ->
                                  case anyToAddr# root2_sAom s1_iAdf of
                                  { (# s2_iAdj, pXInRegion#_iAdk #) ->
                                  case writeAddrOffAddr# ww_sAoz 0# pXInRegion#_iAdk s2_iAdj of
                                  { __DEFAULT ->
                                  runRW#
                                    (\ s_iA6D ->
                                       case takeMVar# bx4_iA5Z s_iA6D of
                                       { (# ipv4_iA79, ipv5_iA7a #) ->
                                       case ipv5_iA7a of { () ->
                                       case unsafeEqualityProof of { UnsafeRefl co_iA7e ->
                                       case compactAddShallow#
                                              c#_iA5X
                                              ((reifyCtorInfoPtr# (##)) `cast` <Co:3> :: ...)
                                              ipv4_iA79
                                       of
                                       { (# ipv6_iA7i, ipv7_iA7j #) ->
                                       case anyToAddr# ipv7_iA7j ipv6_iA7i of
                                       { (# s4_iA7m, pXInRegion#1_iA7n #) ->
                                       case writeAddrOffAddr# ww1_sAoD 0# pXInRegion#1_iA7n s4_iA7m
                                       of s5_iA7p
                                       { __DEFAULT ->
                                       case putMVar# bx4_iA5Z () s5_iA7p of { __DEFAULT ->
                                       Right wild_a3Rw
                                       }
                                       }
                                       }
                                       }
                                       }
                                       }
                                       })
                                  }
                                  }) } in
                       case ipv3_iA63 of {
                         __DEFAULT ->
                           case takeMVar# bx4_iA5Z ipv2_iA62 of
                           { (# ipv4_iA67, ipv5_iA68 #) ->
                           case ipv5_iA68 of { () ->
                           case compactAdd# c#_iA5X wild_a3Rw ipv4_iA67 of
                           { (# ipv6_iA6d, ipv7_iA6e #) ->
                           case putMVar# bx4_iA5Z () ipv6_iA6d of { __DEFAULT ->
                           jump $w$j_sAor ipv7_iA6e
                           }
                           }
                           }
                           };
                         1# -> jump $w$j_sAor wild_a3Rw
                       }
                       })
                  }
              }
              }
              };
            1# -> jump $j_sAgZ
          }
          };
        1# -> jump $j_sAgZ
      }
      }
end Rec }

parseWithDest'
  = \ @r_sAnV $dReifies_sAnW bs_sAnX i_sAnY d_sAnZ ->
      case d_sAnZ of { Dest ww_sAo1 ->
      $wparseWithDest' $dReifies_sAnW bs_sAnX i_sAnY ww_sAo1
      }

parseListWithDest'
  = \ @r_sAot $dReifies_sAou bs_sAov i_sAow dEndPos_sAox d_sAoB ->
      case dEndPos_sAox of { Dest ww_sAoz ->
      case d_sAoB of { Dest ww1_sAoD ->
      $wparseListWithDest' $dReifies_sAou bs_sAov i_sAow ww_sAoz ww1_sAoD
      }
      }

parseStringWithoutDest'1 = C# 'n'#

parseStringWithoutDest'2 = C# '\\'#

parseStringWithoutDest'3 = C# '"'#

Rec {
parseStringWithoutDest'_$sparseStringWithoutDest'
  = \ sc_sAvN sc1_sAvK sc2_sAvL sc3_sAvM acc_ayxC ->
      case <# sc_sAvN 0# of {
        __DEFAULT ->
          case >=# sc_sAvN sc3_sAvM of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAvK sc_sAvN) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAvL ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of ds_XO {
                __DEFAULT ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvN 1#) sc1_sAvK sc2_sAvL sc3_sAvM (: (C# ds_XO) acc_ayxC);
                '"'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvN 1#)
                    sc1_sAvK
                    sc2_sAvL
                    sc3_sAvM
                    (: parseStringWithoutDest'3 acc_ayxC);
                '\\'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvN 1#)
                    sc1_sAvK
                    sc2_sAvL
                    sc3_sAvM
                    (: parseStringWithoutDest'2 acc_ayxC);
                'n'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvN 1#)
                    sc1_sAvK
                    sc2_sAvL
                    sc3_sAvM
                    (: parseStringWithoutDest'_x acc_ayxC)
              }
              }
              };
            1# -> Left (UnexpectedEOFSString (I# sc_sAvN))
          };
        1# -> Left (UnexpectedEOFSString (I# sc_sAvN))
      }

parseStringWithoutDest'_$sparseStringWithoutDest'1
  = \ sc_sAvs sc1_sAvp sc2_sAvq sc3_sAvr acc_ayxC ->
      case <# sc_sAvs 0# of {
        __DEFAULT ->
          case >=# sc_sAvs sc3_sAvr of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAvp sc_sAvs) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAvq ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of ds_XO {
                __DEFAULT ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvs 1#) sc1_sAvp sc2_sAvq sc3_sAvr (: (C# ds_XO) acc_ayxC);
                '"'# -> Right (SString (I# sc_sAvs) (reverse acc_ayxC));
                '\\'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'
                    (+# sc_sAvs 1#) sc1_sAvp sc2_sAvq sc3_sAvr acc_ayxC;
                'n'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAvs 1#)
                    sc1_sAvp
                    sc2_sAvq
                    sc3_sAvr
                    (: parseStringWithoutDest'1 acc_ayxC)
              }
              }
              };
            1# -> Left (UnexpectedEOFSString (I# sc_sAvs))
          };
        1# -> Left (UnexpectedEOFSString (I# sc_sAvs))
      }
end Rec }

parseStringWithoutDest'
  = \ bs_ayxz i_ayxA escape_ayxB acc_ayxC ->
      case i_ayxA of wild_a3Rw { I# x_a3Rx ->
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_ayxz of { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of ds_XO {
                __DEFAULT ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B (: (C# ds_XO) acc_ayxC);
                '"'# ->
                  case escape_ayxB of {
                    False -> Right (SString wild_a3Rw (reverse acc_ayxC));
                    True ->
                      parseStringWithoutDest'_$sparseStringWithoutDest'1
                        (+# x_a3Rx 1#)
                        bx_iA5z
                        bx1_iA5A
                        bx2_iA5B
                        (: parseStringWithoutDest'3 acc_ayxC)
                  };
                '\\'# ->
                  case escape_ayxB of {
                    False ->
                      parseStringWithoutDest'_$sparseStringWithoutDest'
                        (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B acc_ayxC;
                    True ->
                      parseStringWithoutDest'_$sparseStringWithoutDest'1
                        (+# x_a3Rx 1#)
                        bx_iA5z
                        bx1_iA5A
                        bx2_iA5B
                        (: parseStringWithoutDest'2 acc_ayxC)
                  };
                'n'# ->
                  case escape_ayxB of {
                    False ->
                      parseStringWithoutDest'_$sparseStringWithoutDest'1
                        (+# x_a3Rx 1#)
                        bx_iA5z
                        bx1_iA5A
                        bx2_iA5B
                        (: parseStringWithoutDest'1 acc_ayxC);
                    True ->
                      parseStringWithoutDest'_$sparseStringWithoutDest'1
                        (+# x_a3Rx 1#)
                        bx_iA5z
                        bx1_iA5A
                        bx2_iA5B
                        (: parseStringWithoutDest'_x acc_ayxC)
                  }
              }
              }
              };
            1# -> Left (UnexpectedEOFSString wild_a3Rw)
          }
          };
        1# -> Left (UnexpectedEOFSString wild_a3Rw)
      }
      }

parseWithDest
  = \ bs_ayyK ->
      case _withRegion
             (\ @r_ayTg $dReifies_ayTh r1_ayyR ->
                case r1_ayyR of { RegionToken ds1_iAhe ->
                case ds1_iAhe `cast` <Co:1> :: ... of
                { Compact c#_iAhk ds2_iAhl bx_iAhm ->
                case indInfoPtr of { Ptr indInfoAddr#_iAhj ->
                runRW#
                  (\ s0_iAhi ->
                     case takeMVar# bx_iAhm s0_iAhi of { (# ipv_iAhq, ipv1_iAhr #) ->
                     case ipv1_iAhr of { () ->
                     case compactAddShallow# c#_iAhk indInfoAddr#_iAhj ipv_iAhq of
                     { (# ipv2_iAhw, ipv3_iAhx #) ->
                     case anyToAddr# ipv3_iAhx ipv2_iAhw of
                     { (# s3_iAhA, pIndRoot#_iAhB #) ->
                     case getSlots1# ipv3_iAhx s3_iAhA of
                     { (# ipv4_iAhE, ipv5_iAhF #) ->
                     case ipv5_iAhF of { (# dRoot#_sAsb #) ->
                     case putMVar# bx_iAhm () ipv4_iAhE of { __DEFAULT ->
                     case $wparseWithDest'
                            $dReifies_ayTh bs_ayyK defaultSExpr1 dRoot#_sAsb
                     of wild7_iAhT {
                       Left a1_iAhU ->
                         case a1_iAhU of {
                           UnexpectedClosingParen n_aywB ->
                             case n_aywB of { I# i_idUe ->
                             $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                             };
                           UnexpectedEOFSExpr n_aywD ->
                             case n_aywD of { I# i_idUe ->
                             $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                             };
                           UnexpectedEOFSList n_aywF ->
                             case n_aywF of { I# i_idUe ->
                             $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                             };
                           UnexpectedEOFSString n_aywH ->
                             case n_aywH of { I# i_idUe ->
                             $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                             };
                           UnexpectedContentAfter n_aywJ ->
                             case n_aywJ of { I# i_idUe ->
                             $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                             }
                         };
                       Right b1_iAhZ ->
                         case b1_iAhZ of { I# i_idUe ->
                         $w_fromRegExtract $dReifies_ayTh ipv3_iAhx wild7_iAhT
                         }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                }
                }
                })
      of
      { Ur ds_dzCX ->
      case ds_dzCX of { (sexpr_XN, res_ayyM) ->
      case res_ayyM of {
        Left err_ayz7 -> Left err_ayz7;
        Right i_ayz8 ->
          case i_ayz8 of { I# i1_iAaN ->
          case bs_ayyK of { BS bx_iAgB bx1_iAgC bx2_iAgD ->
          case <# i1_iAaN (-# bx2_iAgD 1#) of {
            __DEFAULT -> Right sexpr_XN;
            1# ->
              let { n_sAi4 = +# i1_iAaN 1# } in
              case <=# n_sAi4 0# of {
                __DEFAULT ->
                  case >=# n_sAi4 bx2_iAgD of {
                    __DEFAULT ->
                      case -# bx2_iAgD n_sAi4 of ds2_iAk9 {
                        __DEFAULT ->
                          let { unbx_iA5w = plusAddr# bx_iAgB n_sAi4 } in
                          let { end_iAka = plusAddr# unbx_iA5w ds2_iAk9 } in
                          join { exit_XP = Left (UnexpectedContentAfter (I# n_sAi4)) } in
                          join { exit1_XQ = Right sexpr_XN } in
                          joinrec {
                            $wgo2_sAp0 ww_sAoV ww1_sAoW eta_sAoY
                              = case eqAddr# ww_sAoV end_iAka of {
                                  __DEFAULT ->
                                    case readWord8OffAddr# ww_sAoV 0# eta_sAoY of
                                    { (# ipv2_iAkk, ipv3_iAkl #) ->
                                    case touch# ww1_sAoW ipv2_iAkk of s'_iAkn { __DEFAULT ->
                                    case $wisSpace (chr# (word2Int# (word8ToWord# ipv3_iAkl))) of {
                                      False -> jump exit_XP;
                                      True ->
                                        jump $wgo2_sAp0 (plusAddr# ww_sAoV 1#) ww1_sAoW s'_iAkn
                                    }
                                    }
                                    };
                                  1# -> jump exit1_XQ
                                }; } in
                          jump $wgo2_sAp0 unbx_iA5w bx1_iAgC realWorld#;
                        0# -> Right sexpr_XN
                      };
                    1# -> Right sexpr_XN
                  };
                1# ->
                  case bx2_iAgD of ds2_iAk9 {
                    __DEFAULT ->
                      let { end_iAka = plusAddr# bx_iAgB ds2_iAk9 } in
                      join { exit_XP = Left (UnexpectedContentAfter (I# n_sAi4)) } in
                      join { exit1_XQ = Right sexpr_XN } in
                      joinrec {
                        $wgo2_sApe ww_sAp9 ww1_sApa eta_sApc
                          = case eqAddr# ww_sAp9 end_iAka of {
                              __DEFAULT ->
                                case readWord8OffAddr# ww_sAp9 0# eta_sApc of
                                { (# ipv2_iAkk, ipv3_iAkl #) ->
                                case touch# ww1_sApa ipv2_iAkk of s'_iAkn { __DEFAULT ->
                                case $wisSpace (chr# (word2Int# (word8ToWord# ipv3_iAkl))) of {
                                  False -> jump exit_XP;
                                  True -> jump $wgo2_sApe (plusAddr# ww_sAp9 1#) ww1_sApa s'_iAkn
                                }
                                }
                                };
                              1# -> jump exit1_XQ
                            }; } in
                      jump $wgo2_sApe bx_iAgB bx1_iAgC realWorld#;
                    0# -> Right sexpr_XN
                  }
              }
          }
          }
          }
      }
      }
      }

lvl3_rAz8 = C# ' '#

lvl4_rAz9 = ")"#

lvl5_rAza = "\n"#

lvl6_rAzb = "("#

lvl7_rAzc = "()"#

z_rAzd = unpackCString# lvl4_rAz9

lvl8_rAze = unpackCString# lvl7_rAzc

Rec {
showSExpr_$sshowSExpr1
  = \ indent_ayxe ds_dzD3 ->
      case ds_dzD3 of {
        SList ds1_dzDj ds2_dzDk ->
          case ds2_dzDk of {
            [] ->
              case indent_ayxe of { I# ww_iAil ->
              ++ ($wreplicate $fDupableChar ww_iAil lvl3_rAz8) lvl8_rAze
              };
            : x_ayxj xs_ayxk ->
              case indent_ayxe of { I# ww_iAil ->
              ++
                ($wreplicate $fDupableChar ww_iAil lvl3_rAz8)
                (unpackAppendCString#
                   lvl6_rAzb
                   (++
                      (showSExpr_$sshowSExpr (I# (+# ww_iAil 1#)) x_ayxj)
                      (let { lvl9_sAyQ = +# ww_iAil 1# } in
                       letrec {
                         go1_iiUT
                           = \ ds3_iiUU ->
                               case ds3_iiUU of {
                                 [] -> z_rAzd;
                                 : y_iiUX ys_iiUY ->
                                   unpackAppendCString#
                                     lvl5_rAza
                                     (++
                                        ($fShowSExpr_$sshowSExpr lvl9_sAyQ y_iiUX)
                                        (go1_iiUT ys_iiUY))
                               }; } in
                       go1_iiUT xs_ayxk)))
              }
          };
        SInteger ds1_dzDl i_ayxm ->
          case indent_ayxe of { I# ww_iAil ->
          ++
            ($wreplicate $fDupableChar ww_iAil lvl3_rAz8)
            (case i_ayxm of { I# n_avEg -> itos n_avEg [] })
          };
        SString ds1_dzDm s_ayxn ->
          case indent_ayxe of { I# ww_iAil ->
          ++
            ($wreplicate $fDupableChar ww_iAil lvl3_rAz8)
            (: $fShowCallStack14 (showLitString s_ayxn $fShowList1))
          };
        SSymbol ds1_dzDn s_ayxo ->
          case indent_ayxe of { I# ww_iAil ->
          ++ ($wreplicate $fDupableChar ww_iAil lvl3_rAz8) s_ayxo
          }
      }

showSExpr_$sshowSExpr
  = \ indent_ayxe ds_dzD3 ->
      case ds_dzD3 of {
        SList ds1_dzDj ds2_dzDk ->
          case ds2_dzDk of {
            [] -> lvl8_rAze;
            : x_ayxj xs_ayxk ->
              unpackAppendCString#
                lvl6_rAzb
                (++
                   (showSExpr_$sshowSExpr
                      (case indent_ayxe of { I# i_iA8v -> I# (+# i_iA8v 1#) }) x_ayxj)
                   (let {
                      lvl9_sAfs
                        = case indent_ayxe of { I# i_iA8v ->
                          (I# (+# i_iA8v 1#)) `cast` <Co:3> :: ...
                          } } in
                    letrec {
                      go1_iiUT
                        = \ ds3_iiUU ->
                            case ds3_iiUU of {
                              [] -> z_rAzd;
                              : y_iiUX ys_iiUY ->
                                unpackAppendCString#
                                  lvl5_rAza
                                  (++
                                     (showSExpr_$sshowSExpr1
                                        (lvl9_sAfs `cast` <Co:2> :: ...) y_iiUX)
                                     (go1_iiUT ys_iiUY))
                            }; } in
                    go1_iiUT xs_ayxk))
          };
        SInteger ds1_dzDl i_ayxm ->
          case i_ayxm of { I# n_avEg -> itos n_avEg [] };
        SString ds1_dzDm s_ayxn ->
          : $fShowCallStack14 (showLitString s_ayxn $fShowList1);
        SSymbol ds1_dzDn s_ayxo -> s_ayxo
      }

$fShowSExpr_$sshowSExpr
  = \ sc_sAuQ ds_dzD3 ->
      case ds_dzD3 of {
        SList ds1_dzDj ds2_dzDk ->
          case ds2_dzDk of {
            [] -> ++ ($wreplicate $fDupableChar sc_sAuQ lvl3_rAz8) lvl8_rAze;
            : x_ayxj xs_ayxk ->
              ++
                ($wreplicate $fDupableChar sc_sAuQ lvl3_rAz8)
                (unpackAppendCString#
                   lvl6_rAzb
                   (++
                      (showSExpr_$sshowSExpr (I# (+# sc_sAuQ 1#)) x_ayxj)
                      (let { lvl9_sAyS = +# sc_sAuQ 1# } in
                       letrec {
                         go1_iiUT
                           = \ ds3_iiUU ->
                               case ds3_iiUU of {
                                 [] -> z_rAzd;
                                 : y_iiUX ys_iiUY ->
                                   unpackAppendCString#
                                     lvl5_rAza
                                     (++
                                        ($fShowSExpr_$sshowSExpr lvl9_sAyS y_iiUX)
                                        (go1_iiUT ys_iiUY))
                               }; } in
                       go1_iiUT xs_ayxk)))
          };
        SInteger ds1_dzDl i_ayxm ->
          ++
            ($wreplicate $fDupableChar sc_sAuQ lvl3_rAz8)
            (case i_ayxm of { I# n_avEg -> itos n_avEg [] });
        SString ds1_dzDm s_ayxn ->
          ++
            ($wreplicate $fDupableChar sc_sAuQ lvl3_rAz8)
            (: $fShowCallStack14 (showLitString s_ayxn $fShowList1));
        SSymbol ds1_dzDn s_ayxo ->
          ++ ($wreplicate $fDupableChar sc_sAuQ lvl3_rAz8) s_ayxo
      }
end Rec }

showSExpr
  = \ cont_ayxd indent_ayxe ds_dzD3 ->
      case ds_dzD3 of {
        SList ds1_dzDj ds2_dzDk ->
          case ds2_dzDk of {
            [] ->
              case cont_ayxd of {
                False ->
                  case indent_ayxe of { I# ww_iAil ->
                  ++ ($wreplicate $fDupableChar ww_iAil lvl3_rAz8) lvl8_rAze
                  };
                True -> lvl8_rAze
              };
            : x_ayxj xs_ayxk ->
              let {
                arg_sAin
                  = unpackAppendCString#
                      lvl6_rAzb
                      (++
                         (showSExpr_$sshowSExpr
                            (case indent_ayxe of { I# i_iA8v -> I# (+# i_iA8v 1#) }) x_ayxj)
                         (let {
                            lvl9_sAfs
                              = case indent_ayxe of { I# i_iA8v ->
                                (I# (+# i_iA8v 1#)) `cast` <Co:3> :: ...
                                } } in
                          letrec {
                            go1_iiUT
                              = \ ds3_iiUU ->
                                  case ds3_iiUU of {
                                    [] -> z_rAzd;
                                    : y_iiUX ys_iiUY ->
                                      unpackAppendCString#
                                        lvl5_rAza
                                        (++
                                           (showSExpr_$sshowSExpr1
                                              (lvl9_sAfs `cast` <Co:2> :: ...) y_iiUX)
                                           (go1_iiUT ys_iiUY))
                                  }; } in
                          go1_iiUT xs_ayxk)) } in
              case cont_ayxd of {
                False ->
                  case indent_ayxe of { I# ww_iAil ->
                  ++ ($wreplicate $fDupableChar ww_iAil lvl3_rAz8) arg_sAin
                  };
                True -> arg_sAin
              }
          };
        SInteger ds1_dzDl i_ayxm ->
          case cont_ayxd of {
            False ->
              case indent_ayxe of { I# ww_iAil ->
              ++
                ($wreplicate $fDupableChar ww_iAil lvl3_rAz8)
                (case i_ayxm of { I# n_avEg -> itos n_avEg [] })
              };
            True -> case i_ayxm of { I# n_avEg -> itos n_avEg [] }
          };
        SString ds1_dzDm s_ayxn ->
          case cont_ayxd of {
            False ->
              case indent_ayxe of { I# ww_iAil ->
              ++
                ($wreplicate $fDupableChar ww_iAil lvl3_rAz8)
                (: $fShowCallStack14 (showLitString s_ayxn $fShowList1))
              };
            True -> : $fShowCallStack14 (showLitString s_ayxn $fShowList1)
          };
        SSymbol ds1_dzDn s_ayxo ->
          case cont_ayxd of {
            False ->
              case indent_ayxe of { I# ww_iAil ->
              ++ ($wreplicate $fDupableChar ww_iAil lvl3_rAz8) s_ayxo
              };
            True -> s_ayxo
          }
      }

$fShowSExpr_$cshow = \ x_ayx5 -> $fShowSExpr_$sshowSExpr 0# x_ayx5

$fShowSExpr_$cshowsPrec
  = \ _ x_aaSc s_aaSd ->
      ++ ($fShowSExpr_$sshowSExpr 0# x_aaSc) s_aaSd

$fShowSExpr1
  = \ x_aaSc s_aaSd -> ++ ($fShowSExpr_$sshowSExpr 0# x_aaSc) s_aaSd

$fShowSExpr_$cshowList
  = \ ls_aaS6 s_aaS7 -> showList__ $fShowSExpr1 ls_aaS6 s_aaS7

$fShowSExpr
  = C:Show
      $fShowSExpr_$cshowsPrec $fShowSExpr_$cshow $fShowSExpr_$cshowList

Rec {
parseListWithoutDest'_$sparseWithoutDest'
  = \ sc_sAu4 sc1_sAu1 sc2_sAu2 sc3_sAu3 ->
      case <# sc_sAu4 0# of {
        __DEFAULT ->
          case >=# sc_sAu4 sc3_sAu3 of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAu1 sc_sAu4) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAu2 ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of {
                __DEFAULT ->
                  case $wnextTokenAt sc_sAu4 sc1_sAu1 sc2_sAu2 sc3_sAu3 of
                  { (# ww_sAqz, ww1_sAqA, ww2_sAqB #) ->
                  case <=# ww2_sAqB 0# of {
                    __DEFAULT ->
                      case readInt (BS ww_sAqz ww1_sAqA ww2_sAqB) of {
                        Nothing ->
                          Right
                            (SSymbol
                               (I# (-# (+# sc_sAu4 ww2_sAqB) 1#))
                               ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                        Just ds1_dzDW ->
                          case ds1_dzDW of { (int_ayyl, remaining_ayym) ->
                          case remaining_ayym of { BS bx_XT bx1_XU bx2_XV ->
                          case <=# bx2_XV 0# of {
                            __DEFAULT ->
                              Right
                                (SSymbol
                                   (I# (-# (+# sc_sAu4 ww2_sAqB) 1#))
                                   ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                            1# -> Right (SInteger (I# (-# (+# sc_sAu4 ww2_sAqB) 1#)) int_ayyl)
                          }
                          }
                          }
                      };
                    1# ->
                      parseListWithoutDest'_$sparseWithoutDest'
                        (+# sc_sAu4 1#) sc1_sAu1 sc2_sAu2 sc3_sAu3
                  }
                  };
                '"'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAu4 1#) sc1_sAu1 sc2_sAu2 sc3_sAu3 [];
                '('# ->
                  parseListWithoutDest'_$sparseListWithoutDest'
                    (+# sc_sAu4 1#) sc1_sAu1 sc2_sAu2 sc3_sAu3 [];
                ')'# -> Left (UnexpectedClosingParen (I# sc_sAu4))
              }
              }
              };
            1# -> Left (UnexpectedEOFSExpr (I# sc_sAu4))
          };
        1# -> Left (UnexpectedEOFSExpr (I# sc_sAu4))
      }

parseListWithoutDest'_$sparseListWithoutDest'
  = \ sc_sAtu sc1_sAtr sc2_sAts sc3_sAtt acc_ayy4 ->
      case <# sc_sAtu 0# of {
        __DEFAULT ->
          case >=# sc_sAtu sc3_sAtt of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# sc1_sAtr sc_sAtu) 0# realWorld#
              of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# sc2_sAts ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of wild_XN {
                __DEFAULT ->
                  case $wisSpace wild_XN of {
                    False ->
                      case parseListWithoutDest'_$sparseWithoutDest'
                             sc_sAtu sc1_sAtr sc2_sAts sc3_sAtt
                      of wild2_XP {
                        Left err_ayy6 -> wild2_XP;
                        Right children_ayy7 ->
                          case children_ayy7 of wild3_XQ {
                            SList n_ayx9 ds_dzDz ->
                              case n_ayx9 of { I# i_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i_iA8v 1#) sc1_sAtr sc2_sAts sc3_sAtt (: wild3_XQ acc_ayy4)
                              };
                            SInteger n_ayxa ds_dzDA ->
                              case n_ayxa of { I# i_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i_iA8v 1#) sc1_sAtr sc2_sAts sc3_sAtt (: wild3_XQ acc_ayy4)
                              };
                            SString n_ayxb ds_dzDB ->
                              case n_ayxb of { I# i_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i_iA8v 1#) sc1_sAtr sc2_sAts sc3_sAtt (: wild3_XQ acc_ayy4)
                              };
                            SSymbol n_ayxc ds_dzDC ->
                              case n_ayxc of { I# i_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i_iA8v 1#) sc1_sAtr sc2_sAts sc3_sAtt (: wild3_XQ acc_ayy4)
                              }
                          }
                      };
                    True ->
                      parseListWithoutDest'_$sparseListWithoutDest'
                        (+# sc_sAtu 1#) sc1_sAtr sc2_sAts sc3_sAtt acc_ayy4
                  };
                ')'# -> Right (SList (I# sc_sAtu) (reverse acc_ayy4))
              }
              }
              };
            1# -> Left (UnexpectedEOFSList (I# sc_sAtu))
          };
        1# -> Left (UnexpectedEOFSList (I# sc_sAtu))
      }
end Rec }

parseListWithoutDest'
  = \ bs_ayy2 i_ayy3 acc_ayy4 ->
      case i_ayy3 of wild_a3Rw { I# x_a3Rx ->
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_ayy2 of { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of wild2_XN {
                __DEFAULT ->
                  case $wisSpace wild2_XN of {
                    False ->
                      case parseListWithoutDest'_$sparseWithoutDest'
                             x_a3Rx bx_iA5z bx1_iA5A bx2_iA5B
                      of wild4_XP {
                        Left err_ayy6 -> wild4_XP;
                        Right children_ayy7 ->
                          case children_ayy7 of wild5_XQ {
                            SList n_ayx9 ds_dzDz ->
                              case n_ayx9 of { I# i1_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i1_iA8v 1#) bx_iA5z bx1_iA5A bx2_iA5B (: wild5_XQ acc_ayy4)
                              };
                            SInteger n_ayxa ds_dzDA ->
                              case n_ayxa of { I# i1_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i1_iA8v 1#) bx_iA5z bx1_iA5A bx2_iA5B (: wild5_XQ acc_ayy4)
                              };
                            SString n_ayxb ds_dzDB ->
                              case n_ayxb of { I# i1_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i1_iA8v 1#) bx_iA5z bx1_iA5A bx2_iA5B (: wild5_XQ acc_ayy4)
                              };
                            SSymbol n_ayxc ds_dzDC ->
                              case n_ayxc of { I# i1_iA8v ->
                              parseListWithoutDest'_$sparseListWithoutDest'
                                (+# i1_iA8v 1#) bx_iA5z bx1_iA5A bx2_iA5B (: wild5_XQ acc_ayy4)
                              }
                          }
                      };
                    True ->
                      parseListWithoutDest'_$sparseListWithoutDest'
                        (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B acc_ayy4
                  };
                ')'# -> Right (SList wild_a3Rw (reverse acc_ayy4))
              }
              }
              };
            1# -> Left (UnexpectedEOFSList wild_a3Rw)
          }
          };
        1# -> Left (UnexpectedEOFSList wild_a3Rw)
      }
      }

parseWithoutDest_$sparseWithoutDest'
  = \ sc_sAtp sc1_sAto ->
      case <# sc_sAtp 0# of {
        __DEFAULT ->
          case sc1_sAto of { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# sc_sAtp bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z sc_sAtp) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of {
                __DEFAULT ->
                  case $wnextTokenAt sc_sAtp bx_iA5z bx1_iA5A bx2_iA5B of
                  { (# ww_sAqz, ww1_sAqA, ww2_sAqB #) ->
                  case <=# ww2_sAqB 0# of {
                    __DEFAULT ->
                      case readInt (BS ww_sAqz ww1_sAqA ww2_sAqB) of {
                        Nothing ->
                          Right
                            (SSymbol
                               (I# (-# (+# sc_sAtp ww2_sAqB) 1#))
                               ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                        Just ds1_dzDW ->
                          case ds1_dzDW of { (int_ayyl, remaining_ayym) ->
                          case remaining_ayym of { BS bx4_XT bx5_XU bx6_XV ->
                          case <=# bx6_XV 0# of {
                            __DEFAULT ->
                              Right
                                (SSymbol
                                   (I# (-# (+# sc_sAtp ww2_sAqB) 1#))
                                   ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                            1# -> Right (SInteger (I# (-# (+# sc_sAtp ww2_sAqB) 1#)) int_ayyl)
                          }
                          }
                          }
                      };
                    1# ->
                      parseListWithoutDest'_$sparseWithoutDest'
                        (+# sc_sAtp 1#) bx_iA5z bx1_iA5A bx2_iA5B
                  }
                  };
                '"'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# sc_sAtp 1#) bx_iA5z bx1_iA5A bx2_iA5B [];
                '('# ->
                  parseListWithoutDest'_$sparseListWithoutDest'
                    (+# sc_sAtp 1#) bx_iA5z bx1_iA5A bx2_iA5B [];
                ')'# -> Left (UnexpectedClosingParen (I# sc_sAtp))
              }
              }
              };
            1# -> Left (UnexpectedEOFSExpr (I# sc_sAtp))
          }
          };
        1# -> Left (UnexpectedEOFSExpr (I# sc_sAtp))
      }

parseWithoutDest'
  = \ bs_ayyh i_ayyi ->
      case i_ayyi of wild_a3Rw { I# x_a3Rx ->
      case <# x_a3Rx 0# of {
        __DEFAULT ->
          case bs_ayyh of { BS bx_iA5z bx1_iA5A bx2_iA5B ->
          case >=# x_a3Rx bx2_iA5B of {
            __DEFAULT ->
              case readWord8OffAddr# (plusAddr# bx_iA5z x_a3Rx) 0# realWorld# of
              { (# ipv_iA5J, ipv1_iA5K #) ->
              case touch# bx1_iA5A ipv_iA5J of { __DEFAULT ->
              case chr# (word2Int# (word8ToWord# ipv1_iA5K)) of {
                __DEFAULT ->
                  case $wnextTokenAt x_a3Rx bx_iA5z bx1_iA5A bx2_iA5B of
                  { (# ww_sAqz, ww1_sAqA, ww2_sAqB #) ->
                  case <=# ww2_sAqB 0# of {
                    __DEFAULT ->
                      case readInt (BS ww_sAqz ww1_sAqA ww2_sAqB) of {
                        Nothing ->
                          Right
                            (SSymbol
                               (I# (-# (+# x_a3Rx ww2_sAqB) 1#))
                               ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                        Just ds1_dzDW ->
                          case ds1_dzDW of { (int_ayyl, remaining_ayym) ->
                          case remaining_ayym of { BS bx4_XT bx5_XU bx6_XV ->
                          case <=# bx6_XV 0# of {
                            __DEFAULT ->
                              Right
                                (SSymbol
                                   (I# (-# (+# x_a3Rx ww2_sAqB) 1#))
                                   ($wunpackAppendCharsLazy ww_sAqz ww1_sAqA ww2_sAqB []));
                            1# -> Right (SInteger (I# (-# (+# x_a3Rx ww2_sAqB) 1#)) int_ayyl)
                          }
                          }
                          }
                      };
                    1# ->
                      parseListWithoutDest'_$sparseWithoutDest'
                        (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B
                  }
                  };
                '"'# ->
                  parseStringWithoutDest'_$sparseStringWithoutDest'1
                    (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B [];
                '('# ->
                  parseListWithoutDest'_$sparseListWithoutDest'
                    (+# x_a3Rx 1#) bx_iA5z bx1_iA5A bx2_iA5B [];
                ')'# -> Left (UnexpectedClosingParen wild_a3Rw)
              }
              }
              };
            1# -> Left (UnexpectedEOFSExpr wild_a3Rw)
          }
          };
        1# -> Left (UnexpectedEOFSExpr wild_a3Rw)
      }
      }

parseWithoutDest
  = \ bs_ayyE ->
      case parseWithoutDest_$sparseWithoutDest' 0# bs_ayyE of wild_XM {
        Left err_ayyF -> wild_XM;
        Right sexpr_ayyG ->
          join {
            $j_sAiD i_iAaN
              = case bs_ayyE of { BS bx_iAgB bx1_iAgC bx2_iAgD ->
                case <# i_iAaN (-# bx2_iAgD 1#) of {
                  __DEFAULT -> wild_XM;
                  1# ->
                    join {
                      $w$j_sAqk x_sAqe
                        = join {
                            $w$j1_sAqc ww_sAq7 ww1_sAq8 ww2_sAq9
                              = case ww2_sAq9 of ds2_iAk9 {
                                  __DEFAULT ->
                                    let { end_iAka = plusAddr# ww_sAq7 ds2_iAk9 } in
                                    join {
                                      $s$w$j_sAt6
                                        = Left
                                            (UnexpectedContentAfter
                                               (case sexpr_ayyG of {
                                                  SList n_ayx9 ds_dzDz ->
                                                    case n_ayx9 of { I# i1_iA8v ->
                                                    I# (+# i1_iA8v 1#)
                                                    };
                                                  SInteger n_ayxa ds_dzDA ->
                                                    case n_ayxa of { I# i1_iA8v ->
                                                    I# (+# i1_iA8v 1#)
                                                    };
                                                  SString n_ayxb ds_dzDB ->
                                                    case n_ayxb of { I# i1_iA8v ->
                                                    I# (+# i1_iA8v 1#)
                                                    };
                                                  SSymbol n_ayxc ds_dzDC ->
                                                    case n_ayxc of { I# i1_iA8v ->
                                                    I# (+# i1_iA8v 1#)
                                                    }
                                                })) } in
                                    joinrec {
                                      $wgo2_sAq2 ww3_sApX ww4_sApY eta_sAq0
                                        = case eqAddr# ww3_sApX end_iAka of {
                                            __DEFAULT ->
                                              case readWord8OffAddr# ww3_sApX 0# eta_sAq0 of
                                              { (# ipv2_iAkk, ipv3_iAkl #) ->
                                              case touch# ww4_sApY ipv2_iAkk of s'_iAkn
                                              { __DEFAULT ->
                                              case $wisSpace
                                                     (chr# (word2Int# (word8ToWord# ipv3_iAkl)))
                                              of {
                                                False -> jump $s$w$j_sAt6;
                                                True ->
                                                  jump $wgo2_sAq2
                                                    (plusAddr# ww3_sApX 1#) ww4_sApY s'_iAkn
                                              }
                                              }
                                              };
                                            1# -> wild_XM
                                          }; } in
                                    jump $wgo2_sAq2 ww_sAq7 ww1_sAq8 realWorld#;
                                  0# -> wild_XM
                                } } in
                          case <=# x_sAqe 0# of {
                            __DEFAULT ->
                              case >=# x_sAqe bx2_iAgD of {
                                __DEFAULT ->
                                  jump $w$j1_sAqc
                                    (plusAddr# bx_iAgB x_sAqe) bx1_iAgC (-# bx2_iAgD x_sAqe);
                                1# -> jump $w$j1_sAqc __NULL FinalPtr 0#
                              };
                            1# -> jump $w$j1_sAqc bx_iAgB bx1_iAgC bx2_iAgD
                          } } in
                    case sexpr_ayyG of {
                      SList n_ayx9 ds_dzDz ->
                        case n_ayx9 of { I# i1_iA8v -> jump $w$j_sAqk (+# i1_iA8v 1#) };
                      SInteger n_ayxa ds_dzDA ->
                        case n_ayxa of { I# i1_iA8v -> jump $w$j_sAqk (+# i1_iA8v 1#) };
                      SString n_ayxb ds_dzDB ->
                        case n_ayxb of { I# i1_iA8v -> jump $w$j_sAqk (+# i1_iA8v 1#) };
                      SSymbol n_ayxc ds_dzDC ->
                        case n_ayxc of { I# i1_iA8v -> jump $w$j_sAqk (+# i1_iA8v 1#) }
                    }
                }
                } } in
          case sexpr_ayyG of {
            SList n_ayx9 ds_dzDz ->
              case n_ayx9 of { I# i_iAaN -> jump $j_sAiD i_iAaN };
            SInteger n_ayxa ds_dzDA ->
              case n_ayxa of { I# i_iAaN -> jump $j_sAiD i_iAaN };
            SString n_ayxb ds_dzDB ->
              case n_ayxb of { I# i_iAaN -> jump $j_sAiD i_iAaN };
            SSymbol n_ayxc ds_dzDC ->
              case n_ayxc of { I# i_iAaN -> jump $j_sAiD i_iAaN }
          }
      }


------ Local rules for imported ids --------
"SC:$wparseStringWithDest'1" [2]
    forall @r_sAnV sc_sAxj sc1_sAxg sc2_sAxh sc3_sAxi sc4_sAxf.
      $wparseStringWithDest' sc4_sAxf
                             (BS sc1_sAxg sc2_sAxh sc3_sAxi)
                             (I# sc_sAxj)
                             True
      = parseStringWithDest'_$s$wparseStringWithDest'1
          sc_sAxj sc1_sAxg sc2_sAxh sc3_sAxi sc4_sAxf
"SC:$wparseStringWithDest'0" [2]
    forall @r_sAnV sc_sAx5 sc1_sAx2 sc2_sAx3 sc3_sAx4 sc4_sAx1.
      $wparseStringWithDest' sc4_sAx1
                             (BS sc1_sAx2 sc2_sAx3 sc3_sAx4)
                             (I# sc_sAx5)
                             False
      = parseStringWithDest'_$s$wparseStringWithDest'
          sc_sAx5 sc1_sAx2 sc2_sAx3 sc3_sAx4 sc4_sAx1
"SC:parseStringWithoutDest'1"
    forall sc_sAvN sc1_sAvK sc2_sAvL sc3_sAvM.
      parseStringWithoutDest' (BS sc1_sAvK sc2_sAvL sc3_sAvM)
                              (I# sc_sAvN)
                              True
      = parseStringWithoutDest'_$sparseStringWithoutDest'
          sc_sAvN sc1_sAvK sc2_sAvL sc3_sAvM
"SC:parseStringWithoutDest'0"
    forall sc_sAvs sc1_sAvp sc2_sAvq sc3_sAvr.
      parseStringWithoutDest' (BS sc1_sAvp sc2_sAvq sc3_sAvr)
                              (I# sc_sAvs)
                              False
      = parseStringWithoutDest'_$sparseStringWithoutDest'1
          sc_sAvs sc1_sAvp sc2_sAvq sc3_sAvr
"SC:showSExpr1" forall. showSExpr False = showSExpr_$sshowSExpr1
"SC:showSExpr2" forall. showSExpr True = showSExpr_$sshowSExpr
"SC:showSExpr0"
    forall sc_sAuQ.
      showSExpr False (I# sc_sAuQ)
      = $fShowSExpr_$sshowSExpr sc_sAuQ
"SC:parseListWithoutDest'0"
    forall sc_sAtu sc1_sAtr sc2_sAts sc3_sAtt.
      parseListWithoutDest' (BS sc1_sAtr sc2_sAts sc3_sAtt) (I# sc_sAtu)
      = parseListWithoutDest'_$sparseListWithoutDest'
          sc_sAtu sc1_sAtr sc2_sAts sc3_sAtt
"SC:parseWithoutDest'1"
    forall sc_sAu4 sc1_sAu1 sc2_sAu2 sc3_sAu3.
      parseWithoutDest' (BS sc1_sAu1 sc2_sAu2 sc3_sAu3) (I# sc_sAu4)
      = parseListWithoutDest'_$sparseWithoutDest'
          sc_sAu4 sc1_sAu1 sc2_sAu2 sc3_sAu3
"SC:parseWithoutDest'0"
    forall sc_sAtp sc1_sAto.
      parseWithoutDest' sc1_sAto (I# sc_sAtp)
      = parseWithoutDest_$sparseWithoutDest' sc_sAtp sc1_sAto

